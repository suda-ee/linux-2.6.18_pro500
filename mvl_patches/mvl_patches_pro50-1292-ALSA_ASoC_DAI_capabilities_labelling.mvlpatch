#! /usr/bin/env bash
# Patch: -ALSA_ASoC_DAI_capabilities_labelling
# Date: Mon Jul 21 10:26:38 2008
# MR: 26835
# Disposition: Backport from 2.6.21-rc1
# Adjustments:
# 
# From 527541f9a8a83eedb4d732657dbfdcd2c4ca8bb4 Mon Sep 17 00:00:00 2001
# From: Liam Girdwood <liam.girdwood@wolfsonmicro.com>
# Date: Fri, 13 Oct 2006 12:33:56 +0200
# Subject: [PATCH] [ALSA] ASoC DAI capabilities labelling
# 
# This patch suggested by Takashi changes the DAI capabilities definitions
# in pxa-i2s.c, at91rm9200-i2s.c, wm8731.c, wm8750.c and wm9712.c to use a
# label = value style.
# 
# Signed-off-by: Liam Girdwood <liam.girdwood@wolfsonmicro.com>
# Signed-off-by: Takashi Iwai <tiwai@suse.de>
# Signed-off-by: Jaroslav Kysela <perex@suse.cz>

PATCHNUM=1292
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
MR: 26835
Disposition: Backport from 2.6.21-rc1
Adjustments:

From 527541f9a8a83eedb4d732657dbfdcd2c4ca8bb4 Mon Sep 17 00:00:00 2001
From: Liam Girdwood <liam.girdwood@wolfsonmicro.com>
Date: Fri, 13 Oct 2006 12:33:56 +0200
Subject: [PATCH] [ALSA] ASoC DAI capabilities labelling

This patch suggested by Takashi changes the DAI capabilities definitions
in pxa-i2s.c, at91rm9200-i2s.c, wm8731.c, wm8750.c and wm9712.c to use a
label = value style.

Signed-off-by: Liam Girdwood <liam.girdwood@wolfsonmicro.com>
Signed-off-by: Takashi Iwai <tiwai@suse.de>
Signed-off-by: Jaroslav Kysela <perex@suse.cz>
Index: linux-2.6.18/sound/soc/at91/at91rm9200-i2s.c
===================================================================
--- linux-2.6.18.orig/sound/soc/at91/at91rm9200-i2s.c
+++ linux-2.6.18/sound/soc/at91/at91rm9200-i2s.c
@@ -51,24 +51,52 @@
 static struct snd_soc_dai_mode at91rm9200_i2s[] = {
 
 	/* 8k: BCLK = (MCLK/10) = (60MHz/50) = 1.2MHz */
-	{ AT91RM9200_I2S_DAIFMT, SND_SOC_DAITDM_LRDW(0,0),
-		SNDRV_PCM_FMTBIT_S16_LE, SNDRV_PCM_RATE_8000, AT91RM9200_I2S_DIR,
-		SND_SOC_DAI_BFS_DIV, 1500, SND_SOC_FSBD(10), (25 << 16 | 74) },
+	{
+		.fmt = AT91RM9200_I2S_DAIFMT, 
+		.pcmfmt = SNDRV_PCM_FMTBIT_S16_LE, 
+		.pcmrate = SNDRV_PCM_RATE_8000, 
+		.pcmdir = AT91RM9200_I2S_DIR,
+		.flags = SND_SOC_DAI_BFS_DIV,
+		.fs = 1500,
+		.bfs = SND_SOC_FSBD(10),
+		.priv = (25 << 16 | 74),
+	},
 
 	/* 16k: BCLK = (MCLK/3) ~= (60MHz/14) = 4.285714MHz */
-	{ AT91RM9200_I2S_DAIFMT, SND_SOC_DAITDM_LRDW(0,0),
-		SNDRV_PCM_FMTBIT_S16_LE, SNDRV_PCM_RATE_16000, AT91RM9200_I2S_DIR,
-		SND_SOC_DAI_BFS_DIV, 750, SND_SOC_FSBD(3) , (7 << 16 | 133) },
+	{ 
+		.fmt = AT91RM9200_I2S_DAIFMT,
+		.pcmfmt = SNDRV_PCM_FMTBIT_S16_LE,
+		.pcmrate = SNDRV_PCM_RATE_16000,
+		.pcmdir = AT91RM9200_I2S_DIR,
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 750, 
+		.bfs = SND_SOC_FSBD(3),
+		.flags (7 << 16 | 133),
+	},
 
 	/* 24k: BCLK = (MCLK/10) = (60MHz/50) = 1.2MHz */
-	{ AT91RM9200_I2S_DAIFMT, SND_SOC_DAITDM_LRDW(0,0),
-		SNDRV_PCM_FMTBIT_S16_LE, SNDRV_PCM_RATE_22050, AT91RM9200_I2S_DIR,
-		SND_SOC_DAI_BFS_DIV, 500, SND_SOC_FSBD(10), (25 << 16 | 24) },
+	{ 
+		.fmt = AT91RM9200_I2S_DAIFMT,
+		.pcmfmt = SNDRV_PCM_FMTBIT_S16_LE, 
+		.pcmrate = SNDRV_PCM_RATE_22050, 
+		.pcmdir = AT91RM9200_I2S_DIR,
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 500, 
+		.bfs = SND_SOC_FSBD(10), 
+		.priv = (25 << 16 | 24),
+	},
 
 	/* 48kHz: BCLK = (MCLK/5) ~= (60MHz/26) = 2.3076923MHz */
-	{ AT91RM9200_I2S_DAIFMT, SND_SOC_DAITDM_LRDW(0,0),
-		SNDRV_PCM_FMTBIT_S16_LE, SNDRV_PCM_RATE_48000, AT91RM9200_I2S_DIR,
-		SND_SOC_DAI_BFS_DIV, 250, SND_SOC_FSBD(5), (13 << 16 | 23) },
+	{ 
+		.fmt = AT91RM9200_I2S_DAIFMT,
+		.pcmfmt = SNDRV_PCM_FMTBIT_S16_LE,
+		.pcmrate = SNDRV_PCM_RATE_48000, 
+		.pcmdir = AT91RM9200_I2S_DIR,
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 250, 
+		.bfs SND_SOC_FSBD(5), 
+		.priv = (13 << 16 | 23),
+	},
 };
 
 
Index: linux-2.6.18/sound/soc/codecs/wm8731.c
===================================================================
--- linux-2.6.18.orig/sound/soc/codecs/wm8731.c
+++ linux-2.6.18/sound/soc/codecs/wm8731.c
@@ -85,74 +85,160 @@ static const u16 wm8731_reg[WM8731_CACHE
 static struct snd_soc_dai_mode wm8731_modes[] = {
 	/* codec frame and clock master modes */
 	/* 8k */
-	{WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM, SND_SOC_DAITDM_LRDW(0,0),
-		WM8731_HIFI_BITS, SNDRV_PCM_RATE_8000, WM8731_DIR, 0,
-		1536, SND_SOC_FSB(64)},
-	{WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM, SND_SOC_DAITDM_LRDW(0,0),
-		WM8731_HIFI_BITS, SNDRV_PCM_RATE_8000, WM8731_DIR, 0,
-		2304, SND_SOC_FSB(64)},
-	{WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM, SND_SOC_DAITDM_LRDW(0,0),
-		WM8731_HIFI_BITS, SNDRV_PCM_RATE_8000, WM8731_DIR, 0,
-		1408, SND_SOC_FSB(64)},
-	{WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM, SND_SOC_DAITDM_LRDW(0,0),
-		WM8731_HIFI_BITS, SNDRV_PCM_RATE_8000, WM8731_DIR, 0,
-		2112, SND_SOC_FSB(64)},
+	{
+		.fmt = WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8731_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_8000, 
+		.pcmdir = WM8731_DIR,
+		.fs = 1536, 
+		.bfs = SND_SOC_FSB(64),
+	},
+	{
+		.fmt = WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8731_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_8000, 
+		.pcmdir = WM8731_DIR,
+		.fs = 2304, 
+		.bfs = SND_SOC_FSB(64),
+	},
+	{
+		.fmt = WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8731_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_8000, 
+		.pcmdir = WM8731_DIR,
+		.fs = 1408, 
+		.bfs = SND_SOC_FSB(64),
+	},
+	{
+		.fmt = WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8731_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_8000, 
+		.pcmdir = WM8731_DIR,
+		.fs = 2112, 
+		.bfs = SND_SOC_FSB(64),
+	},
 
 	/* 32k */
-	{WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM, SND_SOC_DAITDM_LRDW(0,0),
-		WM8731_HIFI_BITS, SNDRV_PCM_RATE_32000, WM8731_DIR, 0,
-		384, SND_SOC_FSB(64)},
-	{WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM, SND_SOC_DAITDM_LRDW(0,0),
-		WM8731_HIFI_BITS, SNDRV_PCM_RATE_32000, WM8731_DIR, 0,
-		576, SND_SOC_FSB(64)},
+	{
+		.fmt = WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8731_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_32000,
+		.pcmdir = WM8731_DIR,
+		.fs = 384, 
+		.bfs = SND_SOC_FSB(64),
+	},
+	{
+		.fmt = WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8731_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_32000, 
+		.pcmdir = WM8731_DIR,
+		.fs = 576, 
+		.bfs = SND_SOC_FSB(64),
+	},
 
 	/* 44.1k & 48k */
-	{WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM, SND_SOC_DAITDM_LRDW(0,0),
-		WM8731_HIFI_BITS, SNDRV_PCM_RATE_44100 | SNDRV_PCM_RATE_48000,
-		WM8731_DIR, 0, 256, SND_SOC_FSB(64)},
-	{WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM, SND_SOC_DAITDM_LRDW(0,0),
-		WM8731_HIFI_BITS, SNDRV_PCM_RATE_44100 | SNDRV_PCM_RATE_48000,
-		WM8731_DIR, 0, 384, SND_SOC_FSB(64)},
+	{
+		.fmt = WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8731_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_44100 | SNDRV_PCM_RATE_48000,
+		.pcmdir = WM8731_DIR,
+		.fs = 256, 
+		.bfs = SND_SOC_FSB(64),
+	},
+	{
+		.fmt = WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8731_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_44100 | SNDRV_PCM_RATE_48000,
+		.pcmdir = WM8731_DIR,
+		.fs = 384, 
+		.bfs = SND_SOC_FSB(64),
+	},
 
 	/* 88.2 & 96k */
-	{WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM, SND_SOC_DAITDM_LRDW(0,0),
-		WM8731_HIFI_BITS, SNDRV_PCM_RATE_88200 | SNDRV_PCM_RATE_96000,
-		WM8731_DIR, 0, 128, SND_SOC_FSB(64)},
-	{WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM, SND_SOC_DAITDM_LRDW(0,0),
-		WM8731_HIFI_BITS, SNDRV_PCM_RATE_88200 | SNDRV_PCM_RATE_96000,
-		WM8731_DIR, 0, 192, SND_SOC_FSB(64)},
-
+	{
+		.fmt = WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8731_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_88200 | SNDRV_PCM_RATE_96000,
+		.pcmdir = WM8731_DIR,
+		.fs = 128, 
+		.bfs = SND_SOC_FSB(64),
+		
+	},
+	{
+		.fmt = WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8731_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_88200 | SNDRV_PCM_RATE_96000,
+		.pcmdir = WM8731_DIR,
+		.fs = 192, 
+		.bfs = SND_SOC_FSB(64),
+	},
 
 	/* USB codec frame and clock master modes */
 	/* 8k */
-	{WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM, SND_SOC_DAITDM_LRDW(0,0),
-		WM8731_HIFI_BITS, SNDRV_PCM_RATE_8000, WM8731_DIR,
-		SND_SOC_DAI_BFS_DIV, 1500, SND_SOC_FSBD(1)},
+	{
+		.fmt = WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8731_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_8000, 
+		.pcmdir = WM8731_DIR,
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 1500, 
+		.bfs = SND_SOC_FSBD(1),
+	},
 
 	/* 44.1k */
-	{WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM, SND_SOC_DAITDM_LRDW(0,0),
-		WM8731_HIFI_BITS, SNDRV_PCM_RATE_44100, WM8731_DIR,
-		SND_SOC_DAI_BFS_DIV, 272, SND_SOC_FSBD(1)},
+	{
+		.fmt = WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8731_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_44100, 
+		.pcmdir = WM8731_DIR,
+		.flags = SND_SOC_DAI_BFS_DIV,
+		.fs = 272, 
+		.bfs = SND_SOC_FSBD(1),
+	},
 
 	/* 48k */
-	{WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM, SND_SOC_DAITDM_LRDW(0,0),
-		WM8731_HIFI_BITS, SNDRV_PCM_RATE_48000, WM8731_DIR,
-		SND_SOC_DAI_BFS_DIV, 250, SND_SOC_FSBD(1)},
+	{
+		.fmt = WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8731_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_48000, 
+		.pcmdir = WM8731_DIR,
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 250, 
+		.bfs = SND_SOC_FSBD(1),
+	},
 
 	/* 88.2k */
-	{WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM, SND_SOC_DAITDM_LRDW(0,0),
-		WM8731_HIFI_BITS, SNDRV_PCM_RATE_88200, WM8731_DIR,
-		SND_SOC_DAI_BFS_DIV, 136, SND_SOC_FSBD(1)},
+	{
+		.fmt = WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM, 
+		.pcmfmt = WM8731_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_88200, 
+		.pcmdir = WM8731_DIR,
+		.flags = SND_SOC_DAI_BFS_DIV,
+		.fs = 136, 
+		.bfs = SND_SOC_FSBD(1),
+	},
 
 	/* 96k */
-	{WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM, SND_SOC_DAITDM_LRDW(0,0),
-		WM8731_HIFI_BITS, SNDRV_PCM_RATE_96000, WM8731_DIR,
-		SND_SOC_DAI_BFS_DIV, 125, SND_SOC_FSBD(1)},
+	{
+		.fmt = WM8731_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8731_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_96000, 
+		.pcmdir = WM8731_DIR,
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 125, 
+		.bfs = SND_SOC_FSBD(1),
+	},
 
 	/* codec frame and clock slave modes */
-	{WM8731_DAIFMT | SND_SOC_DAIFMT_CBS_CFS, SND_SOC_DAITDM_LRDW(0,0),
-		WM8731_HIFI_BITS, WM8731_RATES, WM8731_DIR, SND_SOC_DAI_BFS_DIV,
-		SND_SOC_FS_ALL, SND_SOC_FSBD_ALL},
+	{
+		.fmt = WM8731_DAIFMT | SND_SOC_DAIFMT_CBS_CFS,
+		.pcmfmt = WM8731_HIFI_BITS, 
+		.pcmrate = WM8731_RATES, 
+		.pcmdir = WM8731_DIR,
+		.flags = SND_SOC_DAI_BFS_DIV,
+		.fs = SND_SOC_FS_ALL, 
+		.bfs = SND_SOC_FSBD_ALL,
+	},
 };
 
 /*
Index: linux-2.6.18/sound/soc/codecs/wm8750.c
===================================================================
--- linux-2.6.18.orig/sound/soc/codecs/wm8750.c
+++ linux-2.6.18/sound/soc/codecs/wm8750.c
@@ -97,102 +97,254 @@ static const u16 wm8750_reg[] = {
 static struct snd_soc_dai_mode wm8750_modes[] = {
 	/* common codec frame and clock master modes */
 	/* 8k */
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_8000,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 1536, WM8750_HIFI_FSB},
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_8000,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 1408, WM8750_HIFI_FSB},
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_8000,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 2304, WM8750_HIFI_FSB},
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_8000,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 2112, WM8750_HIFI_FSB},
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_8000,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 1500, WM8750_HIFI_FSB},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_8000,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 1536, 
+		.bfs = WM8750_HIFI_FSB,
+	},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_8000,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 1408, 
+		.bfs = WM8750_HIFI_FSB,
+	},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_8000,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 2304, 
+		.bfs = WM8750_HIFI_FSB,
+	},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_8000,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 2112, 
+		.bfs = WM8750_HIFI_FSB,
+	},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_8000,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 1500, 
+		.bfs = WM8750_HIFI_FSB,
+	},
 
 	/* 11.025k */
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_11025,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 1024, WM8750_HIFI_FSB},
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_11025,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 1536, WM8750_HIFI_FSB},
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_11025,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 1088, WM8750_HIFI_FSB},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_11025,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 1024, 
+		.bfs = WM8750_HIFI_FSB,
+	},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_11025,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 1536, 
+		.bfs = WM8750_HIFI_FSB,
+	},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_11025,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 1088, 
+		.bfs = WM8750_HIFI_FSB,
+	},
 
 	/* 16k */
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_16000,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 768, WM8750_HIFI_FSB},
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_16000,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 1152, WM8750_HIFI_FSB},
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_16000,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 750, WM8750_HIFI_FSB},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_16000,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 768, 
+		.bfs = WM8750_HIFI_FSB,
+	},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_16000,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 1152, 
+		.bfs = WM8750_HIFI_FSB
+	},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_16000,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 750, 
+		.bfs = WM8750_HIFI_FSB,
+	},
 
 	/* 22.05k */
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_22050,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 512, WM8750_HIFI_FSB},
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_22050,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 768, WM8750_HIFI_FSB},
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_22050,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 544, WM8750_HIFI_FSB},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_22050,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 512, 
+		.bfs = WM8750_HIFI_FSB,
+	},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_22050,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 768, 
+		.bfs = WM8750_HIFI_FSB,
+	},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_22050,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 544, 
+		.bfs = WM8750_HIFI_FSB,
+	},
 
 	/* 32k */
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_16000,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 384, WM8750_HIFI_FSB},
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_16000,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 576, WM8750_HIFI_FSB},
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_16000,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 375, WM8750_HIFI_FSB},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_32000,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 384, 
+		.bfs = WM8750_HIFI_FSB,
+	},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_32000,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 576, 
+		.bfs = WM8750_HIFI_FSB,
+	},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_32000,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 375, 
+		.bfs = WM8750_HIFI_FSB,
+	},
 
 	/* 44.1k & 48k */
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_44100 |
-		SNDRV_PCM_RATE_48000, WM8750_DIR, SND_SOC_DAI_BFS_DIV, 256,
-		WM8750_HIFI_FSB},
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_44100 |
-		SNDRV_PCM_RATE_48000, WM8750_DIR, SND_SOC_DAI_BFS_DIV, 384,
-		WM8750_HIFI_FSB},
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_44100,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 272, WM8750_HIFI_FSB},
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_48000,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 250, WM8750_HIFI_FSB},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_44100 | SNDRV_PCM_RATE_48000, 
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 256,
+		.bfs = WM8750_HIFI_FSB,
+	},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_44100 | SNDRV_PCM_RATE_48000, 
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 384,
+		.bfs = WM8750_HIFI_FSB,
+	},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_44100,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 272, 
+		.bfs = WM8750_HIFI_FSB,
+	},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_48000,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 250, 
+		.bfs = WM8750_HIFI_FSB,
+	},
 
 	/* 88.2k & 96k */
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_88200 |
-		SNDRV_PCM_RATE_96000, WM8750_DIR, SND_SOC_DAI_BFS_DIV, 128,
-		WM8750_HIFI_FSB},
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_88200 |
-		SNDRV_PCM_RATE_96000, WM8750_DIR, SND_SOC_DAI_BFS_DIV, 192,
-		WM8750_HIFI_FSB},
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_88200,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 136, WM8750_HIFI_FSB},
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAITDM_LRDW(0,0), WM8750_HIFI_BITS, SNDRV_PCM_RATE_96000,
-		WM8750_DIR, SND_SOC_DAI_BFS_DIV, 125, WM8750_HIFI_FSB},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_88200 | SNDRV_PCM_RATE_96000, 
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 128,
+		.bfs = WM8750_HIFI_FSB,
+	},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_88200 | SNDRV_PCM_RATE_96000, 
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 192,
+		.bfs = WM8750_HIFI_FSB,
+	},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_88200,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 136, 
+		.bfs = WM8750_HIFI_FSB,
+	},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBM_CFM,
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = SNDRV_PCM_RATE_96000,
+		.pcmdir = WM8750_DIR, 
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 125, 
+		.bfs = WM8750_HIFI_FSB,
+	},
 
 	/* codec frame and clock slave modes */
-	{WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBS_CFS, SND_SOC_DAITDM_LRDW(0,0),
-		WM8750_HIFI_BITS, WM8750_HIFI_RATES, WM8750_DIR,
-		SND_SOC_DAI_BFS_DIV, SND_SOC_FS_ALL, SND_SOC_FSBD_ALL},
+	{
+		.fmt = WM8750_HIFI_DAIFMT | SND_SOC_DAIFMT_CBS_CFS, 
+		.pcmfmt = WM8750_HIFI_BITS, 
+		.pcmrate = WM8750_HIFI_RATES, 
+		.pcmdir = WM8750_DIR,
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = SND_SOC_FS_ALL, 
+		.bfs = SND_SOC_FSBD_ALL,
+	},
 };
 
 /*
Index: linux-2.6.18/sound/soc/codecs/wm9712.c
===================================================================
--- linux-2.6.18.orig/sound/soc/codecs/wm9712.c
+++ linux-2.6.18/sound/soc/codecs/wm9712.c
@@ -44,8 +44,11 @@ static int ac97_write(struct snd_soc_cod
 
 /* may need to expand this */
 static struct snd_soc_dai_mode ac97_modes[] = {
-	{0, 0,	SNDRV_PCM_FMTBIT_S16_LE,	AC97_RATES},
-	{0, 0,	SNDRV_PCM_FMTBIT_S18_3LE,	AC97_RATES},
+	{
+		.pcmfmt = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S18_3LE,	
+		.pcmrate = AC97_RATES,
+		.pcmdir = AC97_DIR,
+	},
 };
 
 /*
Index: linux-2.6.18/sound/soc/pxa/pxa2xx-i2s.c
===================================================================
--- linux-2.6.18.orig/sound/soc/pxa/pxa2xx-i2s.c
+++ linux-2.6.18/sound/soc/pxa/pxa2xx-i2s.c
@@ -58,30 +58,77 @@ static struct pxa_i2s_port pxa_i2s;
 /* priv is divider */
 static struct snd_soc_dai_mode pxa2xx_i2s_modes[] = {
 	/* pxa2xx I2S frame and clock master modes */
-	{PXA_I2S_DAIFMT | SND_SOC_DAIFMT_CBS_CFS, SND_SOC_DAITDM_LRDW(0,0),
-		SNDRV_PCM_FMTBIT_S16_LE, SNDRV_PCM_RATE_8000, PXA_I2S_DIR,
-		SND_SOC_DAI_BFS_DIV, 256, SND_SOC_FSBD(4), 0x48},
-	{PXA_I2S_DAIFMT | SND_SOC_DAIFMT_CBS_CFS, SND_SOC_DAITDM_LRDW(0,0),
-		SNDRV_PCM_FMTBIT_S16_LE, SNDRV_PCM_RATE_11025, PXA_I2S_DIR,
-		SND_SOC_DAI_BFS_DIV, 256, SND_SOC_FSBD(4), 0x34},
-	{PXA_I2S_DAIFMT | SND_SOC_DAIFMT_CBS_CFS, SND_SOC_DAITDM_LRDW(0,0),
-		SNDRV_PCM_FMTBIT_S16_LE, SNDRV_PCM_RATE_16000, PXA_I2S_DIR,
-		SND_SOC_DAI_BFS_DIV, 256, SND_SOC_FSBD(4), 0x24},
-	{PXA_I2S_DAIFMT | SND_SOC_DAIFMT_CBS_CFS, SND_SOC_DAITDM_LRDW(0,0),
-		SNDRV_PCM_FMTBIT_S16_LE, SNDRV_PCM_RATE_22050, PXA_I2S_DIR,
-		SND_SOC_DAI_BFS_DIV, 256, SND_SOC_FSBD(4), 0x1a},
-	{PXA_I2S_DAIFMT | SND_SOC_DAIFMT_CBS_CFS, SND_SOC_DAITDM_LRDW(0,0),
-		SNDRV_PCM_FMTBIT_S16_LE, SNDRV_PCM_RATE_44100, PXA_I2S_DIR,
-		SND_SOC_DAI_BFS_DIV, 256, SND_SOC_FSBD(4), 0xd},
-	{PXA_I2S_DAIFMT | SND_SOC_DAIFMT_CBS_CFS, SND_SOC_DAITDM_LRDW(0,0),
-		SNDRV_PCM_FMTBIT_S16_LE, SNDRV_PCM_RATE_48000, PXA_I2S_DIR,
-		SND_SOC_DAI_BFS_DIV, 256, SND_SOC_FSBD(4), 0xc},
+	{
+		.fmt = PXA_I2S_DAIFMT | SND_SOC_DAIFMT_CBS_CFS,
+		.pcmfmt = SNDRV_PCM_FMTBIT_S16_LE, 
+		.pcmrate = SNDRV_PCM_RATE_8000, 
+		.pcmdir = PXA_I2S_DIR,
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 256, 
+		.bfs = SND_SOC_FSBD(4), 
+		.priv = 0x48,
+	},
+	{
+		.fmt = PXA_I2S_DAIFMT | SND_SOC_DAIFMT_CBS_CFS,
+		.pcmfmt = SNDRV_PCM_FMTBIT_S16_LE, 
+		.pcmrate = SNDRV_PCM_RATE_11025, 
+		.pcmdir = PXA_I2S_DIR,
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 256, 
+		.bfs = SND_SOC_FSBD(4), 
+		.priv = 0x34,
+	},
+	{
+		.fmt = PXA_I2S_DAIFMT | SND_SOC_DAIFMT_CBS_CFS,
+		.pcmfmt = SNDRV_PCM_FMTBIT_S16_LE, 
+		.pcmrate = SNDRV_PCM_RATE_16000, 
+		.pcmdir = PXA_I2S_DIR,
+		.flags = SND_SOC_DAI_BFS_DIV,
+		.fs = 256, 
+		.bfs = SND_SOC_FSBD(4), 
+		.priv = 0x24,
+	},
+	{
+		.fmt = PXA_I2S_DAIFMT | SND_SOC_DAIFMT_CBS_CFS,
+		.pcmfmt = SNDRV_PCM_FMTBIT_S16_LE, 
+		.pcmrate = SNDRV_PCM_RATE_22050,
+		.pcmdir = PXA_I2S_DIR,
+		.flags = SND_SOC_DAI_BFS_DIV,
+		.fs = 256, 
+		.bfs = SND_SOC_FSBD(4), 
+		.priv = 0x1a,
+	},
+	{
+		.fmt = PXA_I2S_DAIFMT | SND_SOC_DAIFMT_CBS_CFS,
+		.pcmfmt = SNDRV_PCM_FMTBIT_S16_LE, 
+		.pcmrate = SNDRV_PCM_RATE_44100, 
+		.pcmdir = PXA_I2S_DIR,
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 256, 
+		.bfs = SND_SOC_FSBD(4), 
+		.priv = 0xd,
+	},
+	{
+		.fmt = PXA_I2S_DAIFMT | SND_SOC_DAIFMT_CBS_CFS,
+		.pcmfmt = SNDRV_PCM_FMTBIT_S16_LE, 
+		.pcmrate = SNDRV_PCM_RATE_48000, 
+		.pcmdir = PXA_I2S_DIR,
+		.flags = SND_SOC_DAI_BFS_DIV, 
+		.fs = 256, 
+		.bfs = SND_SOC_FSBD(4),
+		.priv = 0xc,
+	},
 
 	/* pxa2xx I2S frame master and clock slave mode */
-	{PXA_I2S_DAIFMT | SND_SOC_DAIFMT_CBM_CFS, SND_SOC_DAITDM_LRDW(0,0),
-		SNDRV_PCM_FMTBIT_S16_LE, PXA_I2S_RATES, PXA_I2S_DIR, 0,
-		SND_SOC_FS_ALL, SND_SOC_FSB(64), 0x48},
-
+	{
+		.fmt = PXA_I2S_DAIFMT | SND_SOC_DAIFMT_CBM_CFS,
+		.pcmfmt = SNDRV_PCM_FMTBIT_S16_LE, 
+		.pcmrate = PXA_I2S_RATES,
+		.pcmdir = PXA_I2S_DIR,
+		.fs = SND_SOC_FS_ALL, 
+		.bfs = SND_SOC_FSB(64), 
+		.priv = 0x48,
+	},
 };
 
 static struct pxa2xx_pcm_dma_params pxa2xx_i2s_pcm_stereo_out = {
Index: linux-2.6.18/mvl_patches/pro50-1292.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1292.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1292);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

