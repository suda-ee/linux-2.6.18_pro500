#! /usr/bin/env bash
# Patch: -pro_powerpc_fsl_2.6.2x_E500V2_IEEE754_preempt_fix
# Date: Fri Aug 15 13:07:23 2008
# Source: local
# MR: 26036
# Type: Defect Fix
# Disposition: local (depends on submitting pro_powerpc_fsl-2.6.2x-E500V2_IEEE754*.patch)
# Signed-off-by: Anton Vorontsov <avorontsov@ru.mvista.com>
# Description:
# [PRO][POWERPC] E500V2 IEEE754 preemption fix
# 
# SPE handlers are using global variables for storing registers
# (to minimise stack usage?). That, in turn, causes preempt-able
# kernel to corrupt registers, because another handler could modify
# them after original handler got preempted.
# 
# Fix this by disabling preemption while we're executing SPE
# instructions.
# 
#  arch/powerpc/sysdev/sigfpe_handler.c |   52 +++++++++++++++++++++++++--------
#  1 files changed, 39 insertions(+), 13 deletions(-)
# 

PATCHNUM=1480
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: local
MR: 26036
Type: Defect Fix
Disposition: local (depends on submitting pro_powerpc_fsl-2.6.2x-E500V2_IEEE754*.patch)
Signed-off-by: Anton Vorontsov <avorontsov@ru.mvista.com>
Description:
[PRO][POWERPC] E500V2 IEEE754 preemption fix

SPE handlers are using global variables for storing registers
(to minimise stack usage?). That, in turn, causes preempt-able
kernel to corrupt registers, because another handler could modify
them after original handler got preempted.

Fix this by disabling preemption while we're executing SPE
instructions.

 arch/powerpc/sysdev/sigfpe_handler.c |   52 ++++++++++++++++++++++++++---------
 mvl_patches/pro50-1480.c             |   16 ++++++++++
 2 files changed, 55 insertions(+), 13 deletions(-)

diff --git a/arch/powerpc/sysdev/sigfpe_handler.c b/arch/powerpc/sysdev/sigfpe_handler.c
index 63f0acb..51302ce 100644
Index: linux-2.6.18/arch/powerpc/sysdev/sigfpe_handler.c
===================================================================
--- linux-2.6.18.orig/arch/powerpc/sysdev/sigfpe_handler.c
+++ linux-2.6.18/arch/powerpc/sysdev/sigfpe_handler.c
@@ -159,12 +159,20 @@ static int type = 0, flag;
 int
 spedata_handler(struct pt_regs *regs)
 {
+	int ret = 0;
 	int i;
 
-	if (get_user(speinsn, (unsigned int __user *) regs->nip))
-		return -EFAULT;
-	if ((speinsn >> 26) != 4)
-		return -EINVAL;         /* not an spe instruction */
+	preempt_disable();
+
+	if (get_user(speinsn, (unsigned int __user *) regs->nip)) {
+		ret = -EFAULT;
+		goto out;
+	}
+	if ((speinsn >> 26) != 4) {
+		ret = -EINVAL;         /* not an spe instruction */
+		goto out;
+	}
+
 	switch ((speinsn >> 5) & 0x7 ) {
 	case SPFP:
 		for(i = 0; i < 32; i++) {
@@ -179,7 +187,10 @@ spedata_handler(struct pt_regs *regs)
 		};
 	}
 
-	if (insn_decode(regs) == -ENOSYS) return -ENOSYS;
+	if (insn_decode(regs) == -ENOSYS) {
+		ret = -ENOSYS;
+		goto out;
+	}
 	flag = func(op0, op1, op2, op3);
 
 	switch ((speinsn >> 5) & 0x7 ) {
@@ -194,24 +205,36 @@ spedata_handler(struct pt_regs *regs)
 			current->thread.evr[i] = fullgprs[i] >> 32;
 		};
 	}
-	return 0;
+out:
+	preempt_enable();
+	return ret;
 }
 
 int
 speround_handler(struct pt_regs *regs)
 {
+	int ret = 0;
 	u32 lsb_lo, lsb_hi;
 	int s_lo, s_hi;
 	int rD;
 
-	if (get_user(speinsn, (unsigned int __user *) regs->nip))
-		return -EFAULT;
-	if ((speinsn >> 26) != 4)
-		return -EINVAL;         /* not an spe instruction */
+	preempt_disable();
+
+	if (get_user(speinsn, (unsigned int __user *) regs->nip)) {
+		ret = -EFAULT;
+		goto out;
+	}
+	if ((speinsn >> 26) != 4) {
+		ret = -EINVAL;         /* not an spe instruction */
+		goto out;
+	}
 
 	rD = (speinsn >> 21) & 0x1f;
 	flag = insn_decode(regs);
-	if (type == XCR) return -ENOSYS;
+	if (type == XCR) {
+		ret = -ENOSYS;
+		goto out;
+	}
 
 	s_lo = (regs->gpr[rD] & 0x80000000) >> 31;
 	s_hi = (current->thread.evr[rD] & 0x80000000) >> 31;
@@ -254,9 +277,12 @@ speround_handler(struct pt_regs *regs)
 		current->thread.evr[rD] = lsb_hi;
 		break;
 	default:
-		return -EINVAL;
+		ret = -EINVAL;
+		goto out;
 	}
-	return 0;
+out:
+	preempt_enable();
+	return ret;
 }
 
 static int insn_decode(struct pt_regs *regs)
Index: linux-2.6.18/mvl_patches/pro50-1480.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1480.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1480);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

