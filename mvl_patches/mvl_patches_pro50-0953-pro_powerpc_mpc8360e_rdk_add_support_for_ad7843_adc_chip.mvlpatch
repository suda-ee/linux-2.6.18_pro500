#! /usr/bin/env bash
# Patch: -pro_powerpc_mpc8360e_rdk_add_support_for_ad7843_adc_chip
# Date: Wed Mar  5 16:44:43 2008
# Source: Anton Vorontsov <avorontsov@ru.mvista.com>
# MR: 26862
# Type: Enhancement
# Disposition: local
# Signed-off-by: Anton Vorontsov <avorontsov@ru.mvista.com>
# Description:
# [PRO POWERPC] MPC8360E-RDK: add support for AD7843 ADC chip
# 
# Support is implemented via board file. Most probably mainline will be
# reluctant accepting this, as we've already seen with MPC8323E-RDB's
# MMC-over-SPI support. Thus, this patch is local. But long term plan
# is: convert spi_mpc83xx driver to use OF platform device bindings,
# and implement OF bindings for SPI devices (AD7843, mmc_spi, etc).
# 
#  arch/powerpc/boot/dts/mpc836x_rdk.dts     |   30 ++++++++
#  arch/powerpc/platforms/83xx/mpc836x_rdk.c |  104 +++++++++++++++++++++++++++++
#  2 files changed, 132 insertions(+), 2 deletions(-)
# 

PATCHNUM=953
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Anton Vorontsov <avorontsov@ru.mvista.com>
MR: 26862
Type: Enhancement
Disposition: local
Signed-off-by: Anton Vorontsov <avorontsov@ru.mvista.com>
Description:
[PRO POWERPC] MPC8360E-RDK: add support for AD7843 ADC chip

Support is implemented via board file. Most probably mainline will be
reluctant accepting this, as we've already seen with MPC8323E-RDB's
MMC-over-SPI support. Thus, this patch is local. But long term plan
is: convert spi_mpc83xx driver to use OF platform device bindings,
and implement OF bindings for SPI devices (AD7843, mmc_spi, etc).

 arch/powerpc/boot/dts/mpc836x_rdk.dts     |   30 ++++++++
 arch/powerpc/platforms/83xx/mpc836x_rdk.c |  104 ++++++++++++++++++++++++++++++
 mvl_patches/pro50-0953.c                  |   16 ++++
 3 files changed, 148 insertions(+), 2 deletions(-)

Index: linux-2.6.18/arch/powerpc/boot/dts/mpc836x_rdk.dts
===================================================================
--- linux-2.6.18.orig/arch/powerpc/boot/dts/mpc836x_rdk.dts
+++ linux-2.6.18/arch/powerpc/boot/dts/mpc836x_rdk.dts
@@ -134,6 +134,13 @@
 			reg = <0x700 0x100>;
 		};
 
+		qe_pio_a: gpio-controller@1400 {
+			#gpio-cells = <2>;
+			compatible = "fsl,qe-pario-bank";
+			reg = <0x1400 0x18>;
+			gpio-controller;
+		};
+
 		qe_pio_e: gpio-controller@1460 {
 			#gpio-cells = <2>;
 			compatible = "fsl,qe-pario-bank";
@@ -167,17 +174,36 @@
 			};
 
 			spi@4c0 {
+				#address-cells = <1>;
+				#size-cells = <0>;
 				cell-index = <0>;
-				compatible = "fsl,spi";
+				device_type = "spi";
+				compatible = "fsl_spi";
 				reg = <0x4c0 0x40>;
 				interrupts = <2>;
 				interrupt-parent = <&qeic>;
 				mode = "cpu-qe";
+				gpios = <&qe_pio_e 14 0>;
+
+				adc@0 {
+					compatible = "ad,AD7843", "ti,ADS7846";
+					reg = <0>;
+					vref = <3300>;
+					/*
+					 * NOTE: PA14 GPIO (pen down state) is
+					 * arbitrary chosen, you can use any GPIO
+					 * as found on the RDK GPIOs connector.
+					 */
+					gpios = <&qe_pio_a 14 0>;
+					interrupts = <17 2>;
+					interrupt-parent = <&ipic>;
+				};
 			};
 
 			spi@500 {
 				cell-index = <1>;
-				compatible = "fsl,spi";
+				device_type = "spi";
+				compatible = "fsl_spi";
 				reg = <0x500 0x40>;
 				interrupts = <1>;
 				interrupt-parent = <&qeic>;
Index: linux-2.6.18/arch/powerpc/platforms/83xx/mpc836x_rdk.c
===================================================================
--- linux-2.6.18.orig/arch/powerpc/platforms/83xx/mpc836x_rdk.c
+++ linux-2.6.18/arch/powerpc/platforms/83xx/mpc836x_rdk.c
@@ -13,6 +13,8 @@
 
 #include <linux/kernel.h>
 #include <linux/pci.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/ads7846.h>
 #include <asm/of_platform.h>
 #include <asm/prom.h>
 #include <asm/time.h>
@@ -21,10 +23,112 @@
 #include <asm/io.h>
 #include <asm/qe.h>
 #include <asm/qe_ic.h>
+#include <asm/gpio.h>
 #include <sysdev/fsl_soc.h>
 
 #include "mpc83xx.h"
 
+int ad7843_cs_gpio;
+int ad7843_ps_gpio;
+
+static void mpc83xx_spi_activate_cs(u8 cs, u8 polarity)
+{
+	gpio_set_value(ad7843_cs_gpio, polarity);
+}
+
+static void mpc83xx_spi_deactivate_cs(u8 cs, u8 polarity)
+{
+	gpio_set_value(ad7843_cs_gpio, !polarity);
+}
+
+static int ads7846_get_pen_state(void)
+{
+	return gpio_get_value(ad7843_ps_gpio);
+}
+
+static struct ads7846_platform_data ads7846_pdata = {
+	.model = 7843,
+	.get_pendown_state = ads7846_get_pen_state,
+};
+
+static struct spi_board_info mpc836x_spi_boardinfo = {
+	.bus_num = 0x4c0,
+	.chip_select = 0,
+	.max_speed_hz = 100000 * 26,
+	.modalias = "ads7846",
+	.platform_data = &ads7846_pdata,
+};
+
+static int __init mpc836x_spi_init(void)
+{
+	struct device_node *np;
+	struct device_node *spi;
+	struct resource irq;
+	const u32 *vref;
+	int size;
+	int ret = -EINVAL;
+
+	np = of_find_compatible_node(NULL, NULL, "ad,AD7843");
+	if (!np)
+		goto err;
+
+	spi = of_get_parent(np);
+	if (!spi)
+		goto err1;
+
+	ad7843_cs_gpio = of_get_gpio(spi, 0);
+	if (ad7843_cs_gpio < 0)
+		goto err2;
+
+	ad7843_ps_gpio = of_get_gpio(np, 0);
+	if (ad7843_cs_gpio < 0)
+		goto err2;
+
+	ret = gpio_request(ad7843_cs_gpio, "ad7843_cs");
+	if (ret)
+		goto err2;
+
+	ret = gpio_request(ad7843_ps_gpio, "ad7843_ps");
+	if (ret)
+		goto err3;
+
+	ret = of_irq_to_resource(np, 0, &irq);
+	if (ret == NO_IRQ) {
+		ret = -EINVAL;
+		goto err4;
+	} else {
+		mpc836x_spi_boardinfo.irq = irq.start;
+	}
+
+	vref = of_get_property(np, "vref", &size);
+	if (vref && size == sizeof(*vref))
+		ads7846_pdata.vref_mv = *vref;
+
+	gpio_direction_output(ad7843_cs_gpio, 1);
+	gpio_direction_input(ad7843_ps_gpio);
+
+	ret = fsl_spi_init(&mpc836x_spi_boardinfo, 1,
+			   mpc83xx_spi_activate_cs,
+			   mpc83xx_spi_deactivate_cs);
+
+	if (ret)
+		goto err4;
+	else
+		goto err2;
+
+err4:
+	gpio_free(ad7843_ps_gpio);
+err3:
+	gpio_free(ad7843_cs_gpio);
+err2:
+	of_node_put(spi);
+err1:
+	of_node_put(np);
+err:
+	return ret;
+}
+machine_device_initcall(mpc836x_rdk, mpc836x_spi_init);
+
 static struct of_device_id __initdata mpc836x_rdk_ids[] = {
 	{ .compatible = "simple-bus", },
 	{},
Index: linux-2.6.18/mvl_patches/pro50-0953.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-0953.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(953);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

