#! /usr/bin/env bash
# Patch: -pro_integration_rtc_m41t80_onto_the_pro_5.0_kernel
# Date: Thu Jun 26 14:13:07 2008
# Source: MontaVista Software, Inc.
# MR: 27582
# Type: Integration
# Disposition: backport
# Signed-off-by: Anton Vorontsov <avorontsov@ru.mvista.com>
# Description:
# 
# [PRO I2C] integration of rtc-m41t80 from 2.6.23-rc4 onto the pro 5.0 kernel
# 	Code of the later version of Linux has been changed with aim to conform
#     with a components of PRO-5.0:
#         - types of parameters of widely used i2c_probe() function were changed;
#         - dev_info() function doesn't present in PRO-5.0; it was replaced by pr_info();
#        - i2c_driver structure has been adapted;
#        - driver identification has been added.
# 

PATCHNUM=1249
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 27582
Type: Integration
Disposition: backport
Signed-off-by: Anton Vorontsov <avorontsov@ru.mvista.com>
Description:

[PRO I2C] integration of rtc-m41t80 from 2.6.23-rc4 onto the pro 5.0 kernel
	Code of the later version of Linux has been changed with aim to conform
    with a components of PRO-5.0:
        - types of parameters of widely used i2c_probe() function were changed;
        - dev_info() function doesn't present in PRO-5.0; it was replaced by pr_info();
       - i2c_driver structure has been adapted;
       - driver identification has been added.

Index: linux-2.6.18/drivers/rtc/rtc-m41t80.c
===================================================================
--- linux-2.6.18.orig/drivers/rtc/rtc-m41t80.c
+++ linux-2.6.18/drivers/rtc/rtc-m41t80.c
@@ -60,6 +60,9 @@
 
 #define DRV_VERSION "0.05"
 
+static char *probe_for = "m41t81";
+module_param(probe_for, charp, 0);
+
 struct m41t80_chip_info {
 	const char *name;
 	u8 features;
@@ -101,6 +104,7 @@ static const struct m41t80_chip_info m41
 };
 
 struct m41t80_data {
+	struct i2c_client client;
 	const struct m41t80_chip_info *chip;
 	struct rtc_device *rtc;
 };
@@ -756,32 +760,30 @@ static struct notifier_block wdt_notifie
  *
  *****************************************************************************
  */
-static int m41t80_probe(struct i2c_client *client)
+
+static struct i2c_driver m41t80_driver;
+
+static int m41t80_probe(struct i2c_adapter *adap, int address, int kind)
 {
 	int i, rc = 0;
 	struct rtc_device *rtc = NULL;
 	struct rtc_time tm;
 	const struct m41t80_chip_info *chip;
+	struct i2c_client *client;
 	struct m41t80_data *clientdata = NULL;
 
-	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C
-				     | I2C_FUNC_SMBUS_BYTE_DATA)) {
-		rc = -ENODEV;
-		goto exit;
-	}
-
-	dev_info(&client->dev,
-		 "chip found, driver version " DRV_VERSION "\n");
+	pr_info("%s: chip found, driver version " DRV_VERSION "\n", __func__);
 
 	chip = NULL;
 	for (i = 0; i < ARRAY_SIZE(m41t80_chip_info_tbl); i++) {
-		if (!strcmp(m41t80_chip_info_tbl[i].name, client->name)) {
+		if (!strcmp(m41t80_chip_info_tbl[i].name, probe_for)) {
 			chip = &m41t80_chip_info_tbl[i];
 			break;
 		}
 	}
+
 	if (!chip) {
-		dev_err(&client->dev, "%s is not supported\n", client->name);
+		pr_err("%s: %s is not supported\n", __func__, probe_for);
 		rc = -ENODEV;
 		goto exit;
 	}
@@ -792,6 +794,19 @@ static int m41t80_probe(struct i2c_clien
 		goto exit;
 	}
 
+	client = &clientdata->client;
+	client->addr = address;
+	client->adapter = adap;
+	client->driver = &m41t80_driver;
+	client->flags = 0;
+	strlcpy(client->name, "m41t81", I2C_NAME_SIZE);
+
+	i2c_set_clientdata(client, clientdata);
+
+	rc = i2c_attach_client(client);
+	if (rc)
+		goto exit;
+
 	rtc = rtc_device_register(client->name, &client->dev,
 				  &m41t80_rtc_ops, THIS_MODULE);
 	if (IS_ERR(rtc)) {
@@ -872,6 +887,20 @@ exit:
 	return rc;
 }
 
+static unsigned short ignore[] = { I2C_CLIENT_END, };
+static unsigned short normal_addr[] = { 0x68, I2C_CLIENT_END, };
+
+static struct i2c_client_address_data addr_data = {
+	.normal_i2c = normal_addr,
+	.probe = ignore,
+	.ignore = ignore,
+};
+
+static int m41t80_attach(struct i2c_adapter *adap)
+{
+	return i2c_probe(adap, &addr_data, m41t80_probe);
+}
+
 static int m41t80_remove(struct i2c_client *client)
 {
 	struct m41t80_data *clientdata = i2c_get_clientdata(client);
@@ -893,9 +922,11 @@ static int m41t80_remove(struct i2c_clie
 static struct i2c_driver m41t80_driver = {
 	.driver = {
 		.name = "rtc-m41t80",
+		.owner = THIS_MODULE,
 	},
-	.probe = m41t80_probe,
-	.remove = m41t80_remove,
+	.id = I2C_DRIVERID_M41T80,
+	.attach_adapter = m41t80_attach,
+	.detach_client = m41t80_remove,
 };
 
 static int __init m41t80_rtc_init(void)
Index: linux-2.6.18/include/linux/i2c-id.h
===================================================================
--- linux-2.6.18.orig/include/linux/i2c-id.h
+++ linux-2.6.18/include/linux/i2c-id.h
@@ -118,6 +118,7 @@
 #define I2C_DRIVERID_ISL1208	88	/* Intersil ISL1208 RTC		*/
 
 #define I2C_DRIVERID_MCU_MPC8349EMITX	95	/* MPC8349E-mITX onboard MCU */
+#define I2C_DRIVERID_M41T80	96	/* ST Micro M41T80 RTC          */
 
 #define I2C_DRIVERID_MISC	99	/* Whatever until sorted out	*/
 
Index: linux-2.6.18/mvl_patches/pro50-1249.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1249.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1249);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

