#! /usr/bin/env bash
# Patch: -powerpc_8xx_Infrastructure_code_cleanup
# Date: Thu Jun 26 14:12:37 2008
# Source: Scott Wood <scottwood@freescale.com>
# 	backport from 2.6.24-rc1 (fb533d0c5a9783ecafa9a177bace6384c47282a9)
# MR: 27582
# Type: Enhancement
# Disposition: local
# Signed-off-by: Gennadiy Kurtsman <gkurtsman@ru.mvista.com>
# Description:
# 
# NOTE: This is partial backport (8 files of 10 are omitted)
# 
# commit fb533d0c5a9783ecafa9a177bace6384c47282a9
# Author: Scott Wood <scottwood@freescale.com>
# Date:   09/14/2007 11:22:36 PM
# 
#     [POWERPC] 8xx: Infrastructure code cleanup.
#     
#     1. Keep a global mpc8xx_immr mapping, rather than constantly
#     creating temporary mappings.
#     2. Look for new fsl,cpm1 and fsl,cpm1-pic names.
#     3. Always reset the CPM when not using the udbg console;
#     this is required in case the firmware initialized a device
#     that is incompatible with one that the kernel is about to
#     use.
#     4. Remove some superfluous casts and header includes.
#     5. Change a usage of IMAP_ADDR to get_immrbase().
#     6. Use phys_addr_t, not uint, for dpram_pbase.
#     7. Various sparse-related fixes, such as __iomem annotations.
#     8. Remove mpc8xx_show_cpuinfo, which doesn't provide anything
#     useful beyond the generic cpuinfo handler.
#     9. Move prototypes for 8xx support functions from board files
#     to sysdev/commproc.h.
#     
#     Signed-off-by: Scott Wood <scottwood@freescale.com>
#     Signed-off-by: Kumar Gala <galak@kernel.crashing.org>
# 

PATCHNUM=1238
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Scott Wood <scottwood@freescale.com>
	backport from 2.6.24-rc1 (fb533d0c5a9783ecafa9a177bace6384c47282a9)
MR: 27582
Type: Enhancement
Disposition: local
Signed-off-by: Gennadiy Kurtsman <gkurtsman@ru.mvista.com>
Description:

NOTE: This is partial backport (8 files of 10 are omitted)

commit fb533d0c5a9783ecafa9a177bace6384c47282a9
Author: Scott Wood <scottwood@freescale.com>
Date:   09/14/2007 11:22:36 PM

    [POWERPC] 8xx: Infrastructure code cleanup.
    
    1. Keep a global mpc8xx_immr mapping, rather than constantly
    creating temporary mappings.
    2. Look for new fsl,cpm1 and fsl,cpm1-pic names.
    3. Always reset the CPM when not using the udbg console;
    this is required in case the firmware initialized a device
    that is incompatible with one that the kernel is about to
    use.
    4. Remove some superfluous casts and header includes.
    5. Change a usage of IMAP_ADDR to get_immrbase().
    6. Use phys_addr_t, not uint, for dpram_pbase.
    7. Various sparse-related fixes, such as __iomem annotations.
    8. Remove mpc8xx_show_cpuinfo, which doesn't provide anything
    useful beyond the generic cpuinfo handler.
    9. Move prototypes for 8xx support functions from board files
    to sysdev/commproc.h.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>
    Signed-off-by: Kumar Gala <galak@kernel.crashing.org>

Index: linux-2.6.18/arch/powerpc/sysdev/commproc.c
===================================================================
--- linux-2.6.18.orig/arch/powerpc/sysdev/commproc.c
+++ linux-2.6.18/arch/powerpc/sysdev/commproc.c
@@ -45,6 +45,7 @@ void m8xx_cpm_dpinit(void);
 static	uint	host_buffer;	/* One page of host buffer */
 static	uint	host_end;	/* end + 1 */
 cpic8xx_t	*cpic_reg;
+immap_t __iomem *mpc8xx_immr;
 
 static struct device_node *cpm_pic_node;
 static struct irq_host *cpm_pic_host;
@@ -198,6 +199,12 @@ void cpm_reset(void)
 	cpm8xx_t	*commproc;
 	sysconf8xx_t    *siu_conf;
 
+	mpc8xx_immr = ioremap(get_immrbase(), 0x4000);
+	if (!mpc8xx_immr) {
+		printk(KERN_CRIT "Could not map IMMR\n");
+		return;
+	}
+
 	commproc = (cpm8xx_t *)immr_map(im_cpm);
 
 #ifdef CONFIG_UCODE_PATCH
Index: linux-2.6.18/include/asm-powerpc/fs_pd.h
===================================================================
--- linux-2.6.18.orig/include/asm-powerpc/fs_pd.h
+++ linux-2.6.18/include/asm-powerpc/fs_pd.h
@@ -31,6 +31,8 @@
 #ifdef CONFIG_8xx
 #include <asm/8xx_immap.h>
 
+extern immap_t __iomem *mpc8xx_immr;
+
 #define immr_map(member)						\
 ({									\
 	u32 offset = offsetof(immap_t, member);				\
Index: linux-2.6.18/mvl_patches/pro50-1238.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1238.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1238);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

