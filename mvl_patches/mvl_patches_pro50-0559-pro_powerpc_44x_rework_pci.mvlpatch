#! /usr/bin/env bash
# Patch: -pro_powerpc_44x_rework_pci
# Date: Fri Oct 26 08:43:16 2007
# Source: MontaVista Software, Inc.
# MR: 25345
# Type: Defect Fix
# Disposition: local
# Signed-off-by: Valentine Barshak <vbarshak@ru.mvista.com>
# Description:
#     Patches from 85xx/85xx resync (MR 25195) remove setup_indirect_pci_nomap()
#     function (commit d5269966e57484548bc5d38e117f161bf2f56ce9)
#     which is used by ppc44x and add a struct device_node *dev
#     parameter to pcibios_alloc_controller() function for pci_32
#     (commit dbf8471f5294b27ba9b6232ffc177dcd4e0a2fa5).
#     These changes break powerpc 44x pci support.
#     The patch reworks 44x pci code and makes it use
#     setup_indirect_pci() function instead.
# 

PATCHNUM=559
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 25345
Type: Defect Fix
Disposition: local
Signed-off-by: Valentine Barshak <vbarshak@ru.mvista.com>
Description:
    Patches from 85xx/85xx resync (MR 25195) remove setup_indirect_pci_nomap()
    function (commit d5269966e57484548bc5d38e117f161bf2f56ce9)
    which is used by ppc44x and add a struct device_node *dev
    parameter to pcibios_alloc_controller() function for pci_32
    (commit dbf8471f5294b27ba9b6232ffc177dcd4e0a2fa5).
    These changes break powerpc 44x pci support.
    The patch reworks 44x pci code and makes it use
    setup_indirect_pci() function instead.

Index: linux-2.6.18/arch/powerpc/platforms/44x/ppc4xx-pci.c
===================================================================
--- linux-2.6.18.orig/arch/powerpc/platforms/44x/ppc4xx-pci.c
+++ linux-2.6.18/arch/powerpc/platforms/44x/ppc4xx-pci.c
@@ -58,23 +58,14 @@ inline void pci_writel(void *pci_reg_bas
 	writel(val, pci_reg_base + offset);
 }
 
-inline void pci_cfg_out(void *cfg, u32 offset, unsigned int value)
-{
-	out_le32((void *)((u32) cfg + offset), value);
-}
-
-inline u32 pci_cfg_in(void *cfg, u32 offset)
-{
-	return in_le32((void *)((u32) cfg + offset));
-}
-
 static void __init ppc4xx_setup_pci(struct pci_controller *hose,
-				     void *pci_reg_base, void *pci_cfg_base)
+				     void *pci_reg_base)
 {
 	unsigned long memory_size, pci_size = 0;
 	phys_addr_t pci_phys_base = 0;
 	phys_addr_t pci_pci_base = 0;
 	int i;
+	u16 cmd;
 
 	memory_size = total_memory;
 
@@ -95,11 +86,9 @@ static void __init ppc4xx_setup_pci(stru
 		return;
 	}
 
-	pci_cfg_out(pci_cfg_base, PPC4xx_PCI_CFGA_OFFSET,
-		    (pci_pci_base & 0xFFFFFFFF) | (PCI_COMMAND & 0xfc));
-	pci_cfg_out(pci_cfg_base, PPC4xx_PCI_CFGD_OFFSET,
-		    (pci_cfg_in(pci_cfg_base, PPC4xx_PCI_CFGD_OFFSET) |
-		     PCI_COMMAND_MEMORY | PCI_COMMAND_MASTER));
+	early_read_config_word(hose, 0, 0, PCI_COMMAND, &cmd);
+	cmd |= PCI_COMMAND_MASTER | PCI_COMMAND_MEMORY;
+	early_write_config_word(hose, 0, 0, PCI_COMMAND, cmd);
 
 	/* Disable region first */
 	pci_writel(pci_reg_base, PPC4xx_PCIL0_PMM0MA, 0);
@@ -156,15 +145,18 @@ int __init ppc4xx_add_bridge(struct devi
 	struct pci_controller *hose;
 	const int *bus_range;
 	int primary = 1;
-	void __iomem *reg, *cfg_addr, *cfg_data;
+	struct resource cfg_res;
+	void __iomem *reg;
 
 	/* Fetch host bridge registers address */
 	reg = of_iomap(dev, 1);
-	cfg_addr = of_iomap(dev, 0);
-	cfg_data = (void __iomem*)((u32)cfg_addr + PPC4xx_PCI_CFGD_OFFSET);
 
-	DBG("Adding PCI host bridge %s\n reg %p cfg %p\n", dev->full_name, reg,
-	    cfg_addr);
+	if (of_address_to_resource(dev, 0, &cfg_res)) {
+		printk(KERN_ERR "Failed to obtain cfg resource\n");
+		return -EINVAL;
+	}
+
+	DBG("Adding PCI host bridge %s\n reg %p\n", dev->full_name, reg);
 
 	/* Get bus range if any */
 	bus_range = of_get_property(dev, "bus-range", &len);
@@ -173,20 +165,20 @@ int __init ppc4xx_add_bridge(struct devi
 		       " bus 0\n", dev->full_name);
 
 	pci_assign_all_buses = 1;
-	hose = pcibios_alloc_controller();
+	hose = pcibios_alloc_controller(dev);
 	if (!hose)
 		return -ENOMEM;
-	hose->arch_data = dev;
 
 	hose->first_busno = bus_range ? bus_range[0] : 0;
 	hose->last_busno = bus_range ? bus_range[1] : 0xff;
 
-	setup_indirect_pci_nomap(hose, cfg_addr, cfg_data);
+	setup_indirect_pci(hose, cfg_res.start,
+				cfg_res.start + PPC4xx_PCI_CFGD_OFFSET, 0);
 
 	/* Interpret the "ranges" property */
 	/* This also maps the I/O region and sets isa_io/mem_base */
 	pci_process_bridge_OF_ranges(hose, dev, primary);
-	ppc4xx_setup_pci(hose, reg, cfg_addr);
+	ppc4xx_setup_pci(hose, reg);
 
 	return 0;
 }
Index: linux-2.6.18/mvl_patches/pro50-0559.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-0559.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(559);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

