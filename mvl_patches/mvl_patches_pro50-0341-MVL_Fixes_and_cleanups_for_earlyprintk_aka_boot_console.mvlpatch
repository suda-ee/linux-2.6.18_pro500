#! /usr/bin/env bash
# Patch: -MVL_Fixes_and_cleanups_for_earlyprintk_aka_boot_console
# Date: Wed Sep 26 11:17:25 2007
# MR: 24856
# Adjustments:
#     MIPS code has been modified, since MIPS support in the community
#     has changed significantly. Also "saved_command_line" has been 
#     renamed to "boot_command_line" in the community.
# From 69331af79cf29e26d1231152a172a1a10c2df511 Mon Sep 17 00:00:00 2001
# From: Gerd Hoffmann <kraxel@suse.de>
# Date: Tue, 8 May 2007 00:26:49 -0700
# Subject: [PATCH] Fixes and cleanups for earlyprintk aka boot console
# 
# The console subsystem already has an idea of a boot console, using the
# CON_BOOT flag.  The implementation has some flaws though.  The major
# problem is that presence of a boot console makes register_console() ignore
# any other console devices (unless explicitly specified on the kernel
# command line).
# 
# This patch fixes the console selection code to *not* consider a boot
# console a full-featured one, so the first non-boot console registering will
# become the default console instead.  This way the unregister call for the
# boot console in the register_console() function actually triggers and the
# handover from the boot console to the real console device works smoothly.
# Added a printk for the handover, so you know which console device the
# output goes to when the boot console stops printing messages.
# 
# The disable_early_printk() call is obsolete with that patch, explicitly
# disabling the early console isn't needed any more as it works automagically
# with that patch.
# 
# I've walked through the tree, dropped all disable_early_printk() instances
# found below arch/ and tagged the consoles with CON_BOOT if needed.  The
# code is tested on x86, sh (thanks to Paul) and mips (thanks to Ralf).
# 
# Changes to last version: Rediffed against -rc3, adapted to mips cleanups by
# Ralf, fixed "udbg-immortal" cmd line arg on powerpc.
# 
# Signed-off-by: Gerd Hoffmann <kraxel@exsuse.de>
# Acked-by: Paul Mundt <lethal@linux-sh.org>
# Acked-by: Ralf Baechle <ralf@linux-mips.org>
# Cc: Andi Kleen <ak@suse.de>
# Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
# Cc: Richard Henderson <rth@twiddle.net>
# Cc: Ivan Kokshaysky <ink@jurassic.park.msu.ru>
# Cc: Paul Mackerras <paulus@samba.org>
# Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
# Cc: Jeremy Fitzhardinge <jeremy@goop.org>
# Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
# Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

PATCHNUM=341
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
MR: 24856
Adjustments:
    MIPS code has been modified, since MIPS support in the community
    has changed significantly. Also "saved_command_line" has been 
    renamed to "boot_command_line" in the community.
From 69331af79cf29e26d1231152a172a1a10c2df511 Mon Sep 17 00:00:00 2001
From: Gerd Hoffmann <kraxel@suse.de>
Date: Tue, 8 May 2007 00:26:49 -0700
Subject: [PATCH] Fixes and cleanups for earlyprintk aka boot console

The console subsystem already has an idea of a boot console, using the
CON_BOOT flag.  The implementation has some flaws though.  The major
problem is that presence of a boot console makes register_console() ignore
any other console devices (unless explicitly specified on the kernel
command line).

This patch fixes the console selection code to *not* consider a boot
console a full-featured one, so the first non-boot console registering will
become the default console instead.  This way the unregister call for the
boot console in the register_console() function actually triggers and the
handover from the boot console to the real console device works smoothly.
Added a printk for the handover, so you know which console device the
output goes to when the boot console stops printing messages.

The disable_early_printk() call is obsolete with that patch, explicitly
disabling the early console isn't needed any more as it works automagically
with that patch.

I've walked through the tree, dropped all disable_early_printk() instances
found below arch/ and tagged the consoles with CON_BOOT if needed.  The
code is tested on x86, sh (thanks to Paul) and mips (thanks to Ralf).

Changes to last version: Rediffed against -rc3, adapted to mips cleanups by
Ralf, fixed "udbg-immortal" cmd line arg on powerpc.

Signed-off-by: Gerd Hoffmann <kraxel@exsuse.de>
Acked-by: Paul Mundt <lethal@linux-sh.org>
Acked-by: Ralf Baechle <ralf@linux-mips.org>
Cc: Andi Kleen <ak@suse.de>
Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
Cc: Richard Henderson <rth@twiddle.net>
Cc: Ivan Kokshaysky <ink@jurassic.park.msu.ru>
Cc: Paul Mackerras <paulus@samba.org>
Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
Cc: Jeremy Fitzhardinge <jeremy@goop.org>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Index: linux-2.6.18/arch/alpha/kernel/setup.c
===================================================================
--- linux-2.6.18.orig/arch/alpha/kernel/setup.c
+++ linux-2.6.18/arch/alpha/kernel/setup.c
@@ -739,15 +739,6 @@ setup_arch(char **cmdline_p)
 	paging_init();
 }
 
-void __init
-disable_early_printk(void)
-{
-	if (alpha_using_srm && srmcons_output) {
-		unregister_srm_console();
-		srmcons_output = 0;
-	}
-}
-
 static char sys_unknown[] = "Unknown";
 static char systype_names[][16] = {
 	"0",
Index: linux-2.6.18/arch/alpha/kernel/srmcons.c
===================================================================
--- linux-2.6.18.orig/arch/alpha/kernel/srmcons.c
+++ linux-2.6.18/arch/alpha/kernel/srmcons.c
@@ -300,7 +300,7 @@ static struct console srmcons = {
 	.write		= srm_console_write,
 	.device		= srm_console_device,
 	.setup		= srm_console_setup,
-	.flags		= CON_PRINTBUFFER,
+	.flags		= CON_PRINTBUFFER | CON_BOOT,
 	.index		= -1,
 };
 
Index: linux-2.6.18/arch/mips/cobalt/console.c
===================================================================
--- linux-2.6.18.orig/arch/mips/cobalt/console.c
+++ linux-2.6.18/arch/mips/cobalt/console.c
@@ -40,8 +40,3 @@ void __init cobalt_early_console(void)
 
 	printk("Cobalt: early console registered\n");
 }
-
-void __init disable_early_printk(void)
-{
-	unregister_console(&cons_info);
-}
Index: linux-2.6.18/arch/mips/dec/prom/console.c
===================================================================
--- linux-2.6.18.orig/arch/mips/dec/prom/console.c
+++ linux-2.6.18/arch/mips/dec/prom/console.c
@@ -29,7 +29,7 @@ static void __init prom_console_write(st
 static struct console promcons __initdata = {
 	.name	= "prom",
 	.write	= prom_console_write,
-	.flags	= CON_PRINTBUFFER,
+	.flags	= CON_PRINTBUFFER | CON_BOOT,
 	.index	= -1,
 };
 
@@ -50,6 +50,3 @@ void __init unregister_prom_console(void
 		promcons_output = 0;
 	}
 }
-
-void disable_early_printk(void)
-	__attribute__((alias("unregister_prom_console")));
Index: linux-2.6.18/arch/mips/sgi-ip27/ip27-console.c
===================================================================
--- linux-2.6.18.orig/arch/mips/sgi-ip27/ip27-console.c
+++ linux-2.6.18/arch/mips/sgi-ip27/ip27-console.c
@@ -67,8 +67,3 @@ __init void ip27_setup_console(void)
 {
 	register_console(&ioc3_console);
 }
-
-void __init disable_early_printk(void)
-{
-	unregister_console(&ioc3_console);
-}
Index: linux-2.6.18/arch/powerpc/kernel/udbg.c
===================================================================
--- linux-2.6.18.orig/arch/powerpc/kernel/udbg.c
+++ linux-2.6.18/arch/powerpc/kernel/udbg.c
@@ -140,29 +140,22 @@ static void udbg_console_write(struct co
 static struct console udbg_console = {
 	.name	= "udbg",
 	.write	= udbg_console_write,
-	.flags	= CON_PRINTBUFFER | CON_ENABLED,
+	.flags	= CON_PRINTBUFFER | CON_ENABLED | CON_BOOT,
 	.index	= -1,
 };
 
 static int early_console_initialized;
 
-void __init disable_early_printk(void)
-{
-	if (!early_console_initialized)
-		return;
-	if (strstr(saved_command_line, "udbg-immortal")) {
-		printk(KERN_INFO "early console immortal !\n");
-		return;
-	}
-	unregister_console(&udbg_console);
-	early_console_initialized = 0;
-}
-
 /* called by setup_system */
 void register_early_udbg_console(void)
 {
 	if (early_console_initialized)
 		return;
+
+	if (strstr(saved_command_line, "udbg-immortal")) {
+		printk(KERN_INFO "early console immortal !\n");
+		udbg_console.flags &= ~CON_BOOT;
+	}
 	early_console_initialized = 1;
 	register_console(&udbg_console);
 }
Index: linux-2.6.18/arch/sh/kernel/early_printk.c
===================================================================
--- linux-2.6.18.orig/arch/sh/kernel/early_printk.c
+++ linux-2.6.18/arch/sh/kernel/early_printk.c
@@ -100,7 +100,7 @@ static struct console early_console = {
 	.name		= "sercon",
 	.write		= scif_sercon_write,
 	.setup		= scif_sercon_setup,
-	.flags		= CON_PRINTBUFFER,
+	.flags		= CON_PRINTBUFFER | CON_BOOT,
 	.index		= -1,
 };
 
@@ -130,8 +130,3 @@ void __init enable_early_printk(void)
 	register_console(&early_console);
 }
 
-void disable_early_printk(void)
-{
-	unregister_console(&early_console);
-}
-
Index: linux-2.6.18/arch/sh64/kernel/early_printk.c
===================================================================
--- linux-2.6.18.orig/arch/sh64/kernel/early_printk.c
+++ linux-2.6.18/arch/sh64/kernel/early_printk.c
@@ -79,7 +79,7 @@ static struct console sh_console = {
 	.name		= "scifcon",
 	.write		= sh_console_write,
 	.setup		= sh_console_setup,
-	.flags		= CON_PRINTBUFFER,
+	.flags		= CON_PRINTBUFFER | CON_BOOT,
 	.index		= -1,
 };
 
@@ -97,9 +97,3 @@ void __init enable_early_printk(void)
 
 	register_console(&sh_console);
 }
-
-void disable_early_printk(void)
-{
-	unregister_console(&sh_console);
-}
-
Index: linux-2.6.18/arch/x86_64/kernel/early_printk.c
===================================================================
--- linux-2.6.18.orig/arch/x86_64/kernel/early_printk.c
+++ linux-2.6.18/arch/x86_64/kernel/early_printk.c
@@ -248,22 +248,14 @@ int __init setup_early_printk(char *opt)
  		early_console = &simnow_console;
  		keep_early = 1;
 	}
+
+	if (keep_early)
+		early_console->flags &= ~CON_BOOT;
+	else
+		early_console->flags |= CON_BOOT;
 	early_console_initialized = 1;
 	register_console(early_console);
 	return 0;
 }
 
-void __init disable_early_printk(void)
-{
-	if (!early_console_initialized || !early_console)
-		return;
-	if (!keep_early) {
-		printk("disabling early console\n");
-		unregister_console(early_console);
-		early_console_initialized = 0;
-	} else {
-		printk("keeping early console\n");
-	}
-}
-
 __setup("earlyprintk=", setup_early_printk);
Index: linux-2.6.18/drivers/char/tty_io.c
===================================================================
--- linux-2.6.18.orig/drivers/char/tty_io.c
+++ linux-2.6.18/drivers/char/tty_io.c
@@ -138,8 +138,6 @@ static DECLARE_MUTEX(allocated_ptys_lock
 static int ptmx_open(struct inode *, struct file *);
 #endif
 
-extern void disable_early_printk(void);
-
 static void initialize_tty_struct(struct tty_struct *tty);
 
 static ssize_t tty_read(struct file *, char __user *, size_t, loff_t *);
@@ -3849,9 +3847,6 @@ void __init console_init(void)
 	 * set up the console device so that later boot sequences can 
 	 * inform about problems etc..
 	 */
-#ifdef CONFIG_EARLY_PRINTK
-	disable_early_printk();
-#endif
 	call = __con_initcall_start;
 	while (call < __con_initcall_end) {
 		(*call)();
Index: linux-2.6.18/kernel/printk.c
===================================================================
--- linux-2.6.18.orig/kernel/printk.c
+++ linux-2.6.18/kernel/printk.c
@@ -985,8 +985,16 @@ void register_console(struct console *co
 {
 	int i;
 	unsigned long flags;
+	struct console *bootconsole = NULL;
 
-	if (preferred_console < 0)
+	if (console_drivers) {
+		if (console->flags & CON_BOOT)
+			return;
+		if (console_drivers->flags & CON_BOOT)
+			bootconsole = console_drivers;
+	}
+
+	if (preferred_console < 0 || bootconsole || !console_drivers)
 		preferred_console = selected_console;
 
 	/*
@@ -1032,8 +1040,11 @@ void register_console(struct console *co
 	if (!(console->flags & CON_ENABLED))
 		return;
 
-	if (console_drivers && (console_drivers->flags & CON_BOOT)) {
-		unregister_console(console_drivers);
+	if (bootconsole) {
+		printk(KERN_INFO "console handover: boot [%s%d] -> real [%s%d]\n",
+		       bootconsole->name, bootconsole->index,
+		       console->name, console->index);
+		unregister_console(bootconsole);
 		console->flags &= ~CON_PRINTBUFFER;
 	}
 
@@ -1084,16 +1095,11 @@ int unregister_console(struct console *c
 		}
 	}
 
-	/* If last console is removed, we re-enable picking the first
-	 * one that gets registered. Without that, pmac early boot console
-	 * would prevent fbcon from taking over.
-	 *
+	/*
 	 * If this isn't the last console and it has CON_CONSDEV set, we
 	 * need to set it on the next preferred console.
 	 */
-	if (console_drivers == NULL)
-		preferred_console = selected_console;
-	else if (console->flags & CON_CONSDEV)
+	if (console_drivers != NULL && console->flags & CON_CONSDEV)
 		console_drivers->flags |= CON_CONSDEV;
 
 	release_console_sem();
Index: linux-2.6.18/mvl_patches/pro50-0341.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-0341.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(341);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

