#! /usr/bin/env bash
# Patch: -common_arm_freescale_mx27ads_usb_sync_locking_fix
# Date: Tue Mar 11 17:37:31 2008
# Source:  http://opensource.freescale.com/pub/scm/linux-2.6-mx.git
# MR: 26885
# Type: Bugfix
# Disposition: to be submitted to opensource.freescale.com
# Signed-off-by:  Aleksey Makarov <amakarov@ru.mvista.com>
# Description:
# 	This patch fixes locking issues spotted in rt mode
# 

PATCHNUM=980
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source:  http://opensource.freescale.com/pub/scm/linux-2.6-mx.git
MR: 26885
Type: Bugfix
Disposition: to be submitted to opensource.freescale.com
Signed-off-by:  Aleksey Makarov <amakarov@ru.mvista.com>
Description:
	This patch fixes locking issues spotted in rt mode

Index: linux-2.6.18/drivers/usb/gadget/arcotg_udc.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/gadget/arcotg_udc.c
+++ linux-2.6.18/drivers/usb/gadget/arcotg_udc.c
@@ -1099,10 +1099,14 @@ static int arcotg_ep_queue(struct usb_ep
 		if (udc->ep0_state != DATA_STATE_XMIT &&
 		    udc->ep0_state != DATA_STATE_RECV &&
 		    (udc->local_setup_buff).wLength == 0) {
+			spin_lock_irqsave(&udc->lock, flags);
 			if (ep0_prime_status(udc, EP_DIR_IN))
 				ep0stall(udc);
-			else
+			else {
+				spin_unlock_irqrestore(&udc->lock, flags);
 				return 0;
+			}
+			spin_unlock_irqrestore(&udc->lock, flags);
 		}
 	}
 
@@ -1141,8 +1145,10 @@ static int arcotg_ep_queue(struct usb_ep
 	/* push the dtds to device queue */
 	if (!arcotg_req_to_dtd(req, udc))
 		arcotg_queue_td(ep, req);
-	else
+	else {
+		spin_unlock_irqrestore(&udc->lock, flags);
 		return -ENOMEM;
+	}
 
 	/* EP0 */
 	if ((ep_index(ep) == 0)) {
@@ -1491,6 +1497,8 @@ static void ep0stall(struct arcotg_udc *
  * @param udc device controller pointer
  * @param direction in or out
  * @return Returns zero on success , or a negative error code
+ *
+ * should be called with udc->lock held
  */
 static int ep0_prime_status(struct arcotg_udc *udc, int direction)
 {
@@ -1498,7 +1506,6 @@ static int ep0_prime_status(struct arcot
 	struct arcotg_req *req = udc->status_req;
 	struct arcotg_ep *ep;
 	int status = 0;
-	unsigned long flags;
 
 	pr_debug("%s\n", __FUNCTION__);
 	if (direction == EP_DIR_IN)
@@ -1517,8 +1524,6 @@ static int ep0_prime_status(struct arcot
 	req->req.complete = NULL;
 	req->dtd_count = 0;
 
-	spin_lock_irqsave(&udc->lock, flags);
-
 	if ((arcotg_req_to_dtd(req, udc) == 0))
 		status = arcotg_queue_td(ep, req);
 	else
@@ -1530,8 +1535,6 @@ static int ep0_prime_status(struct arcot
 	list_add_tail(&req->queue, &ep->queue);
 	dump_ep_queue(ep);
 
-	spin_unlock_irqrestore(&udc->lock, flags);
-
 	return status;
 }
 
@@ -1628,9 +1631,15 @@ stall:
 static void ch9setconfig(struct arcotg_udc *udc, u16 value, u16 index,
 			 u16 length)
 {
+	int err;
 	pr_debug("udc: 1 calling gadget driver->setup\n");
 	udc->ep0_dir = USB_DIR_IN;
-	if (udc->driver->setup(&udc->gadget, &udc->local_setup_buff) >= 0) {
+
+	spin_unlock(&udc->lock);
+	err = udc->driver->setup(&udc->gadget, &udc->local_setup_buff);
+	spin_lock(&udc->lock);
+
+	if (err >= 0) {
 		/* gadget layer deal with the status phase */
 		udc->usb_state = USB_STATE_CONFIGURED;
 		udc->ep0_state = WAIT_FOR_OUT_STATUS;
@@ -1641,6 +1650,7 @@ static void ch9setconfig(struct arcotg_u
 static void setup_received_irq(struct arcotg_udc *udc,
 			       struct usb_ctrlrequest *setup)
 {
+	int err;
 	u16 ptc = 0;		/* port test control */
 	int handled = 1;	/* set to zero if we do not handle the message,
 				   and should pass it to the gadget driver */
@@ -1665,8 +1675,10 @@ static void setup_received_irq(struct ar
 
 		case USB_BULK_RESET_REQUEST:
 			udc->ep0_dir = USB_DIR_IN;
-			if (udc->driver->setup(&udc->gadget,
-					       &udc->local_setup_buff) >= 0) {
+			spin_unlock(&udc->lock);
+			err = udc->driver->setup(&udc->gadget, &udc->local_setup_buff);
+			spin_lock(&udc->lock);
+			if (err >= 0) {
 				udc->ep0_state = WAIT_FOR_SETUP;
 				pr_debug("udc: ep0_state now WAIT_FOR_SETUP\n");
 			}
@@ -1713,8 +1725,10 @@ static void setup_received_irq(struct ar
 			     USB_RECIP_INTERFACE))
 				break;
 			udc->ep0_dir = USB_DIR_IN;
-			if (udc->driver->setup(&udc->gadget,
-					       &udc->local_setup_buff) >= 0)
+			spin_unlock(&udc->lock);
+			err = udc->driver->setup(&udc->gadget, &udc->local_setup_buff);
+			spin_lock(&udc->lock);
+			if (err >= 0)
 				/* gadget layer take over the status phase */
 				break;
 			/* Requests with no data phase */
@@ -1791,8 +1805,10 @@ static void setup_received_irq(struct ar
 	}
 
 	if (!handled) {
-		if (udc->driver->setup(&udc->gadget, &udc->local_setup_buff)
-		    != 0) {
+		spin_unlock(&udc->lock);
+		err = udc->driver->setup(&udc->gadget, &udc->local_setup_buff);
+		spin_lock(&udc->lock);
+		if (err != 0) {
 			ep0stall(udc);
 		} else if (setup->bRequestType & USB_DIR_IN) {
 			udc->ep0_state = DATA_STATE_XMIT;
@@ -2095,8 +2111,11 @@ static void suspend_irq(struct arcotg_ud
 	udc->usb_state = USB_STATE_SUSPENDED;
 
 	/* report suspend to the driver ,serial.c not support this */
-	if (udc->driver->suspend)
+	if (udc->driver->suspend) {
+		spin_unlock(&udc->lock);
 		udc->driver->suspend(&udc->gadget);
+		spin_lock(&udc->lock);
+	}
 }
 
 static void resume_irq(struct arcotg_udc *udc)
@@ -2107,8 +2126,11 @@ static void resume_irq(struct arcotg_udc
 	udc->resume_state = 0;
 
 	/* report resume to the driver , serial.c not support this */
-	if (udc->driver->resume)
+	if (udc->driver->resume) {
+		spin_unlock(&udc->lock);
 		udc->driver->resume(&udc->gadget);
+		spin_lock(&udc->lock);
+	}
 
 }
 
@@ -2121,7 +2143,9 @@ static int reset_queues(struct arcotg_ud
 		udc_reset_ep_queue(udc, pipe);
 
 	/* report disconnect; the driver is already quiesced */
+	spin_unlock(&udc->lock);
 	udc->driver->disconnect(&udc->gadget);
+	spin_lock(&udc->lock);
 
 	return 0;
 }
Index: linux-2.6.18/mvl_patches/pro50-0980.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-0980.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(980);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

