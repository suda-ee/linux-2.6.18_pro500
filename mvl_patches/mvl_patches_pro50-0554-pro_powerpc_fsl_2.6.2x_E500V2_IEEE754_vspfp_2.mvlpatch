#! /usr/bin/env bash
# Patch: -pro_powerpc_fsl_2.6.2x_E500V2_IEEE754_vspfp_2
# Date: Fri Oct 26 08:42:55 2007
# Source: Freescale Semiconductor
# MR: 25195
# Type: Enhancement
# Disposition: merged from Freescale Semiconductor
# Signed-off-by: Randy Vinson <rvinson@mvista.com>
# Description:
# Add the implementations to handle Vector SPFP instructions exceptions
# complying with IEEE-754.
# 
# Signed-off-by:Ebony Zhu <ebony.zhu@freescale.com>

PATCHNUM=554
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Freescale Semiconductor
MR: 25195
Type: Enhancement
Disposition: merged from Freescale Semiconductor
Signed-off-by: Randy Vinson <rvinson@mvista.com>
Description:
Add the implementations to handle Vector SPFP instructions exceptions
complying with IEEE-754.

Signed-off-by:Ebony Zhu <ebony.zhu@freescale.com>
Index: linux-2.6.18/arch/powerpc/math-emu/evfsabs.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/powerpc/math-emu/evfsabs.c
@@ -0,0 +1,33 @@
+/*
+ * arch/powerpc/math-emu/evfsabs.c
+ *
+ * Copyright (C) 2006 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Ebony Zhu, ebony.zhu@freescale.com
+ *
+ * Description:
+ * This file is the implementation of SPE instruction "evfsabs"
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <asm/uaccess.h>
+
+int
+evfsabs(u32 *rD, u32 *rA)
+{
+	rD[0] = rA[0] & 0x7fffffff;
+	rD[1] = rA[1] & 0x7fffffff;
+
+#ifdef DEBUG
+	printk("%s: D %p, A %p: ", __FUNCTION__, rD, rA);
+	printk("\n");
+#endif
+
+	return 0;
+}
Index: linux-2.6.18/arch/powerpc/math-emu/evfsadd.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/powerpc/math-emu/evfsadd.c
@@ -0,0 +1,63 @@
+/*
+ * arch/powerpc/math-emu/evfsadd.c
+ *
+ * Copyright (C) 2006 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Ebony Zhu, ebony.zhu@freescale.com
+ *
+ * Description:
+ * This file is the implementation of SPE instruction "evfsadd"
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <asm/uaccess.h>
+
+#include "spe.h"
+#include "soft-fp.h"
+#include "single.h"
+
+int
+evfsadd(u64 *rD, u32 *rA, u32 *rB)
+{
+	FP_DECL_S(A0);
+	FP_DECL_S(A1);
+	FP_DECL_S(B0);
+	FP_DECL_S(B1);
+	FP_DECL_S(R0);
+	FP_DECL_S(R1);
+	int ret = 0;
+
+#ifdef DEBUG
+	printk("%s: %p %p %p\n", __FUNCTION__, rD, rA, rB);
+#endif
+
+	__FP_UNPACK_S(A0, rA);
+	rA[0] = rA[1];
+	__FP_UNPACK_S(A1, rA);
+	__FP_UNPACK_S(B0, rB);
+	rB[0] = rB[1];
+	__FP_UNPACK_S(B1, rB);
+
+#ifdef DEBUG
+	printk("A0: %ld %lu %ld (%ld)\n", A0_s, A0_f, A0_e, A0_c);
+	printk("A1: %ld %lu %ld (%ld)\n", A1_s, A1_f, A1_e, A1_c);
+	printk("B0: %ld %lu %ld (%ld)\n", B0_s, B0_f, B0_e, B0_c);	
+	printk("B1: %ld %lu %ld (%ld)\n", B1_s, B1_f, B1_e, B1_c);	
+#endif
+	
+	FP_ADD_S(R0, A0, B0);
+	FP_ADD_S(R1, A1, B1);
+
+#ifdef DEBUG
+	printk("D0: %ld %lu %ld (%ld)\n", R0_s, R0_f, R0_e, R0_c);
+	printk("D1: %ld %lu %ld (%ld)\n", R1_s, R1_f, R1_e, R1_c);
+#endif
+	
+	return (ret | __FP_PACK_S(rD, R0) | __FP_PACK_S(rD+1, R1));
+}
Index: linux-2.6.18/arch/powerpc/math-emu/evfscmpeq.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/powerpc/math-emu/evfscmpeq.c
@@ -0,0 +1,69 @@
+/*
+ * arch/powerpc/math-emu/evfscmpeq.c
+ *
+ * Copyright (C) 2006 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Ebony Zhu, ebony.zhu@freescale.com
+ *
+ * Description:
+ * This file is the implementation of SPE instruction "evfscmpeq"
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <asm/uaccess.h>
+
+#include "spe.h"
+#include "soft-fp.h"
+#include "single.h"
+
+int
+evfscmpeq(u32 *ccr, int crD, u32 *rA, u32 *rB)
+{
+	FP_DECL_S(A0);
+	FP_DECL_S(A1);
+	FP_DECL_S(B0);
+	FP_DECL_S(B1);
+	long cmp, cmp0, cmp1, ch, cl;
+	int ret = 0;
+
+#ifdef DEBUG
+	printk("%s: %p (%08x) %d %p %p\n", __FUNCTION__, ccr, *ccr, crD, rA, rB);
+#endif
+
+	__FP_UNPACK_S(A0, rA);
+	rA[0] = rA[1];
+	__FP_UNPACK_S(A1, rA);
+	__FP_UNPACK_S(B0, rB);
+	rB[0] = rB[1];
+	__FP_UNPACK_S(B1, rB);
+
+#ifdef DEBUG
+	printk("A0: %ld %lu %ld (%ld)\n", A0_s, A0_f, A0_e, A0_c);
+	printk("A1: %ld %lu %ld (%ld)\n", A1_s, A1_f, A1_e, A1_c);
+	printk("B0: %ld %lu %ld (%ld)\n", B0_s, B0_f, B0_e, B0_c);
+	printk("B1: %ld %lu %ld (%ld)\n", B1_s, B1_f, B1_e, B1_c);
+#endif
+
+	FP_CMP_S(cmp0, A0, B0, 2);
+	FP_CMP_S(cmp1, A1, B1, 2);
+
+	ch = (cmp0 == 0) ? 1 : 0;
+	cl = (cmp1 == 0) ? 1 : 0;
+	cmp = 0;
+	cmp = (ch << 3) | (cl << 2) | ((ch | cl) << 1) | ((ch & cl) << 0);
+
+	*ccr &= ~(15 << ((7 - crD) << 2));
+	*ccr |= (cmp << ((7 - crD) << 2));
+
+#ifdef DEBUG
+	printk("CR: %08x\n", *ccr);
+#endif
+
+	return ret;
+}
Index: linux-2.6.18/arch/powerpc/math-emu/evfscmpgt.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/powerpc/math-emu/evfscmpgt.c
@@ -0,0 +1,69 @@
+/*
+ * arch/powerpc/math-emu/evfscmpgt.c
+ *
+ * Copyright (C) 2006 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Ebony Zhu, ebony.zhu@freescale.com
+ *
+ * Description:
+ * This file is the implementation of SPE instruction "evfscmpgt"
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <asm/uaccess.h>
+
+#include "spe.h"
+#include "soft-fp.h"
+#include "single.h"
+
+int
+evfscmpgt(u32 *ccr, int crD, u32 *rA, u32 *rB)
+{
+	FP_DECL_S(A0);
+	FP_DECL_S(A1);
+	FP_DECL_S(B0);
+	FP_DECL_S(B1);
+	long cmp, cmp0, cmp1, ch, cl;
+	int ret = 0;
+
+#ifdef DEBUG
+	printk("%s: %p (%08x) %d %p %p\n", __FUNCTION__, ccr, *ccr, crD, rA, rB);
+#endif
+
+	__FP_UNPACK_S(A0, rA);
+	rA[0] = rA[1];
+	__FP_UNPACK_S(A1, rA);
+	__FP_UNPACK_S(B0, rB);
+	rB[0] = rB[1];
+	__FP_UNPACK_S(B1, rB);
+
+#ifdef DEBUG
+	printk("A0: %ld %lu %ld (%ld)\n", A0_s, A0_f, A0_e, A0_c);
+	printk("A1: %ld %lu %ld (%ld)\n", A1_s, A1_f, A1_e, A1_c);
+	printk("B0: %ld %lu %ld (%ld)\n", B0_s, B0_f, B0_e, B0_c);
+	printk("B1: %ld %lu %ld (%ld)\n", B1_s, B1_f, B1_e, B1_c);
+#endif
+
+	FP_CMP_S(cmp0, A0, B0, 2);
+	FP_CMP_S(cmp1, A1, B1, 2);
+
+	ch = (cmp0 == 1) ? 1 : 0;
+	cl = (cmp1 == 1) ? 1 : 0;
+	cmp = 0;
+	cmp = (ch << 3) | (cl << 2) | ((ch | cl) << 1) | ((ch & cl) << 0);
+
+	*ccr &= ~(15 << ((7 - crD) << 2));
+	*ccr |= (cmp << ((7 - crD) << 2));
+
+#ifdef DEBUG
+	printk("CR: %08x\n", *ccr);
+#endif
+
+	return ret;
+}
Index: linux-2.6.18/arch/powerpc/math-emu/evfscmplt.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/powerpc/math-emu/evfscmplt.c
@@ -0,0 +1,69 @@
+/*
+ * arch/powerpc/math-emu/evfscmplt.c
+ *
+ * Copyright (C) 2006 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Ebony Zhu, ebony.zhu@freescale.com
+ *
+ * Description:
+ * This file is the implementation of SPE instruction "evfscmplt"
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <asm/uaccess.h>
+
+#include "spe.h"
+#include "soft-fp.h"
+#include "single.h"
+
+int
+evfscmplt(u32 *ccr, int crD, u32 *rA, u32 *rB)
+{
+	FP_DECL_S(A0);
+	FP_DECL_S(A1);
+	FP_DECL_S(B0);
+	FP_DECL_S(B1);
+	long cmp, cmp0, cmp1, ch, cl;
+	int ret = 0;
+
+#ifdef DEBUG
+	printk("%s: %p (%08x) %d %p %p\n", __FUNCTION__, ccr, *ccr, crD, rA, rB);
+#endif
+
+	__FP_UNPACK_S(A0, rA);
+	rA[0] = rA[1];
+	__FP_UNPACK_S(A1, rA);
+	__FP_UNPACK_S(B0, rB);
+	rB[0] = rB[1];
+	__FP_UNPACK_S(B1, rB);
+
+#ifdef DEBUG
+	printk("A0: %ld %lu %ld (%ld)\n", A0_s, A0_f, A0_e, A0_c);
+	printk("A1: %ld %lu %ld (%ld)\n", A1_s, A1_f, A1_e, A1_c);
+	printk("B0: %ld %lu %ld (%ld)\n", B0_s, B0_f, B0_e, B0_c);
+	printk("B1: %ld %lu %ld (%ld)\n", B1_s, B1_f, B1_e, B1_c);
+#endif
+
+	FP_CMP_S(cmp0, A0, B0, 2);
+	FP_CMP_S(cmp1, A1, B1, 2);
+
+	ch = (cmp0 == -1) ? 1 : 0;
+	cl = (cmp1 == -1) ? 1 : 0;
+	cmp = 0;
+	cmp = (ch << 3) | (cl << 2) | ((ch | cl) << 1) | ((ch & cl) << 0);
+
+	*ccr &= ~(15 << ((7 - crD) << 2));
+	*ccr |= (cmp << ((7 - crD) << 2));
+
+#ifdef DEBUG
+	printk("CR: %08x\n", *ccr);
+#endif
+
+	return ret;
+}
Index: linux-2.6.18/arch/powerpc/math-emu/evfsctsf.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/powerpc/math-emu/evfsctsf.c
@@ -0,0 +1,39 @@
+/*
+ * arch/powerpc/math-emu/evfsctsf.c
+ *
+ * Copyright (C) 2006 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Ebony Zhu, ebony.zhu@freescale.com
+ *
+ * Description:
+ * This file is the implementation of SPE instruction "evfsctsf"
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <asm/uaccess.h>
+
+#include "spe.h"
+#include "soft-fp.h"
+#include "single.h"
+
+int
+evfsctsf(u32 *rD, u32 *rB)
+{
+	__asm__ __volatile__ ("mtspr 512, %4\n"
+			      "efsctsf %0, %2\n"
+			      "efsctsf %1, %3\n"
+			      : "=r" (rD[0]), "=r" (rD[1])
+                              : "r" (rB[0]), "r" (rB[1]), "r" (0));
+#ifdef DEBUG
+	printk("%s: D %p, B %p: ", __FUNCTION__, rD, rB);
+	printk("\n");
+#endif
+
+	return 0;
+}
Index: linux-2.6.18/arch/powerpc/math-emu/evfsctsi.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/powerpc/math-emu/evfsctsi.c
@@ -0,0 +1,47 @@
+/*
+ * arch/powerpc/math-emu/evfsctsi.c
+ *
+ * Copyright (C) 2006 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Ebony Zhu, ebony.zhu@freescale.com
+ *
+ * Description:
+ * This file is the implementation of SPE instruction "evfsctsi"
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <asm/uaccess.h>
+
+#include "spe.h"
+#include "soft-fp.h"
+#include "single.h"
+
+int
+evfsctsi(u32 *rD, u32 *rB)
+{
+	FP_DECL_S(B0);
+	FP_DECL_S(B1);
+	unsigned int r0, r1;
+
+	__FP_UNPACK_S(B0, rB);
+	__FP_UNPACK_S(B1, rB+1);
+	_FP_ROUND(1, B0);
+	_FP_ROUND(1, B1);
+	FP_TO_INT_S(r0, B0, 32, 1);
+	rD[0] = r0;
+	FP_TO_INT_S(r1, B1, 32, 1);
+	rD[1] = r1;
+
+#ifdef DEBUG
+	printk("%s: D %p, B %p: ", __FUNCTION__, rD, rB);
+	printk("\n");
+#endif
+
+	return 0;
+}
Index: linux-2.6.18/arch/powerpc/math-emu/evfsctsiz.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/powerpc/math-emu/evfsctsiz.c
@@ -0,0 +1,47 @@
+/*
+ * arch/powerpc/math-emu/evfsctsiz.c
+ *
+ * Copyright (C) 2006 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Ebony Zhu, ebony.zhu@freescale.com
+ *
+ * Description:
+ * This file is the implementation of SPE instruction "evfsctsiz"
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <asm/uaccess.h>
+
+#include "spe.h"
+#include "soft-fp.h"
+#include "single.h"
+
+int
+evfsctsiz(u32 *rD, u32 *rB)
+{
+	FP_DECL_S(B0);
+	FP_DECL_S(B1);
+	unsigned int r0, r1;
+
+	__FP_UNPACK_S(B0, rB);
+	__FP_UNPACK_S(B1, rB+1);
+	_FP_ROUND_ZERO(1, B0);
+	_FP_ROUND_ZERO(1, B1);
+	FP_TO_INT_S(r0, B0, 32, 1);
+	rD[0] = r0;
+	FP_TO_INT_S(r1, B1, 32, 1);
+	rD[1] = r1;
+
+#ifdef DEBUG
+	printk("%s: D %p, B %p: ", __FUNCTION__, rD, rB);
+	printk("\n");
+#endif
+
+	return 0;
+}
Index: linux-2.6.18/arch/powerpc/math-emu/evfsctuf.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/powerpc/math-emu/evfsctuf.c
@@ -0,0 +1,40 @@
+/*
+ * arch/powerpc/math-emu/evfsctuf.c
+ *
+ * Copyright (C) 2006 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Ebony Zhu, ebony.zhu@freescale.com
+ *
+ * Description:
+ * This file is the implementation of SPE instruction "evfsctuf"
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <asm/uaccess.h>
+
+#include "spe.h"
+#include "soft-fp.h"
+#include "single.h"
+
+int
+evfsctuf(u32 *rD, u32 *rB)
+{
+	__asm__ __volatile__ ("mtspr 512, %4\n"
+			      "efsctuf %0, %2\n"
+			      "efsctuf %1, %3\n"
+			      : "=r" (rD[0]), "=r" (rD[1])
+                              : "r" (rB[0]), "r" (rB[1]), "r" (0));
+
+#ifdef DEBUG
+	printk("%s: D %p, B %p: ", __FUNCTION__, rD, rB);
+	printk("\n");
+#endif
+
+	return 0;
+}
Index: linux-2.6.18/arch/powerpc/math-emu/evfsctui.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/powerpc/math-emu/evfsctui.c
@@ -0,0 +1,47 @@
+/*
+ * arch/powerpc/math-emu/evfsctui.c
+ *
+ * Copyright (C) 2006 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Ebony Zhu, ebony.zhu@freescale.com
+ *
+ * Description:
+ * This file is the implementation of SPE instruction "evfsctui"
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <asm/uaccess.h>
+
+#include "spe.h"
+#include "soft-fp.h"
+#include "single.h"
+
+int
+evfsctui(u32 *rD, u32 *rB)
+{
+	FP_DECL_S(B0);
+	FP_DECL_S(B1);
+	unsigned int r0, r1;
+
+	__FP_UNPACK_S(B0, rB);
+	__FP_UNPACK_S(B1, rB+1);
+	_FP_ROUND(1, B0);
+	_FP_ROUND(1, B1);
+	FP_TO_INT_S(r0, B0, 32, 0);
+	rD[0] = r0;
+	FP_TO_INT_S(r1, B1, 32, 0);
+	rD[1] = r1;
+
+#ifdef DEBUG
+	printk("%s: D %p, B %p: ", __FUNCTION__, rD, rB);
+	printk("\n");
+#endif
+
+	return 0;
+}
Index: linux-2.6.18/arch/powerpc/math-emu/evfsctuiz.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/powerpc/math-emu/evfsctuiz.c
@@ -0,0 +1,47 @@
+/*
+ * arch/powerpc/math-emu/evfsctuiz.c
+ *
+ * Copyright (C) 2006 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Ebony Zhu, ebony.zhu@freescale.com
+ *
+ * Description:
+ * This file is the implementation of SPE instruction "evfsctuiz"
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <asm/uaccess.h>
+
+#include "spe.h"
+#include "soft-fp.h"
+#include "single.h"
+
+int
+evfsctuiz(u32 *rD, u32 *rB)
+{
+	FP_DECL_S(B0);
+	FP_DECL_S(B1);
+	unsigned int r0, r1;
+
+	__FP_UNPACK_S(B0, rB);
+	__FP_UNPACK_S(B1, rB+1);
+	_FP_ROUND_ZERO(1, B0);
+	_FP_ROUND_ZERO(1, B1);
+	FP_TO_INT_S(r0, B0, 32, 0);
+	rD[0] = r0;
+	FP_TO_INT_S(r1, B1, 32, 0);
+	rD[1] = r1;
+
+#ifdef DEBUG
+	printk("%s: D %p, B %p: ", __FUNCTION__, rD, rB);
+	printk("\n");
+#endif
+
+	return 0;
+}
Index: linux-2.6.18/arch/powerpc/math-emu/evfsdiv.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/powerpc/math-emu/evfsdiv.c
@@ -0,0 +1,63 @@
+/*
+ * arch/powerpc/math-emu/evfsdiv.c
+ *
+ * Copyright (C) 2006 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Ebony Zhu, ebony.zhu@freescale.com
+ *
+ * Description:
+ * This file is the implementation of SPE instruction "evfsdiv"
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <asm/uaccess.h>
+
+#include "spe.h"
+#include "soft-fp.h"
+#include "single.h"
+
+int
+evfsdiv(u64 *rD, u32 *rA, u32 *rB)
+{
+	FP_DECL_S(A0);
+	FP_DECL_S(A1);
+	FP_DECL_S(B0);
+	FP_DECL_S(B1);
+	FP_DECL_S(R0);
+	FP_DECL_S(R1);
+	int ret = 0;
+
+#ifdef DEBUG
+	printk("%s: %p %p %p\n", __FUNCTION__, rD, rA, rB);
+#endif
+
+	__FP_UNPACK_S(A0, rA);
+	rA[0] = rA[1];
+	__FP_UNPACK_S(A1, rA);
+	__FP_UNPACK_S(B0, rB);
+	rB[0] = rB[1];
+	__FP_UNPACK_S(B1, rB);
+
+#ifdef DEBUG
+	printk("A0: %ld %lu %ld (%ld)\n", A0_s, A0_f, A0_e, A0_c);
+	printk("A1: %ld %lu %ld (%ld)\n", A1_s, A1_f, A1_e, A1_c);
+	printk("B0: %ld %lu %ld (%ld)\n", B0_s, B0_f, B0_e, B0_c);	
+	printk("B1: %ld %lu %ld (%ld)\n", B1_s, B1_f, B1_e, B1_c);	
+#endif
+	
+	FP_DIV_S(R0, A0, B0);
+	FP_DIV_S(R1, A1, B1);
+
+#ifdef DEBUG
+	printk("D0: %ld %lu %ld (%ld)\n", R0_s, R0_f, R0_e, R0_c);
+	printk("D1: %ld %lu %ld (%ld)\n", R1_s, R1_f, R1_e, R1_c);
+#endif
+	
+	return (ret | __FP_PACK_S(rD, R0) | __FP_PACK_S(rD+1, R1));
+}
Index: linux-2.6.18/arch/powerpc/math-emu/evfsmul.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/powerpc/math-emu/evfsmul.c
@@ -0,0 +1,69 @@
+/*
+ * arch/powerpc/math-emu/evfsmul.c
+ *
+ * Copyright (C) 2006 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Ebony Zhu, ebony.zhu@freescale.com
+ *
+ * Description:
+ * This file is the implementation of SPE instruction "evfsmul"
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <asm/uaccess.h>
+
+#include "spe.h"
+#include "soft-fp.h"
+#include "single.h"
+
+int
+evfsmul(u64 *rD, u32 *rA, u32 *rB)
+{
+	FP_DECL_S(A0);
+	FP_DECL_S(A1);
+	FP_DECL_S(B0);
+	FP_DECL_S(B1);
+	FP_DECL_S(R0);
+	FP_DECL_S(R1);
+	int ret = 0;
+
+#ifdef DEBUG
+	printk("%s: %p %p %p\n", __FUNCTION__, rD, rA, rB);
+#endif
+
+	__FP_UNPACK_S(A0, rA);
+	rA[0] = rA[1];
+	__FP_UNPACK_S(A1, rA);
+	__FP_UNPACK_S(B0, rB);
+	rB[0] = rB[1];
+	__FP_UNPACK_S(B1, rB);
+
+#ifdef DEBUG
+        printk("A0: %ld %lu %ld (%ld) [%08lx %lx]\n",
+               A0_s, A0_f, A0_e, A0_c, A0_f, A0_e + 127);
+        printk("A1: %ld %lu %ld (%ld) [%08lx %lx]\n",
+               A1_s, A1_f, A1_e, A1_c, A1_f, A1_e + 127);
+        printk("B0: %ld %lu %ld (%ld) [%08lx %lx]\n",
+               B0_s, B0_f, B0_e, B0_c, B0_f, B0_e + 127);
+        printk("B1: %ld %lu %ld (%ld) [%08lx %lx]\n",
+               B1_s, B1_f, B1_e, B1_c, B1_f, B1_e + 127);
+#endif
+	
+	FP_MUL_S(R0, A0, B0);
+	FP_MUL_S(R1, A1, B1);
+
+#ifdef DEBUG
+	printk("D0: %ld %lu %ld (%ld) [%08lx %lx]\n",
+	       R0_s, R0_f, R0_e, R0_c, R0_f, R0_e + 127);
+	printk("D1: %ld %lu %ld (%ld) [%08lx %lx]\n",
+	       R1_s, R1_f, R1_e, R1_c, R1_f, R1_e + 127);
+#endif
+	
+	return (ret | __FP_PACK_S(rD, R0) | __FP_PACK_S(rD+1, R1));
+}
Index: linux-2.6.18/arch/powerpc/math-emu/evfsnabs.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/powerpc/math-emu/evfsnabs.c
@@ -0,0 +1,33 @@
+/*
+ * arch/powerpc/math-emu/evfsnabs.c
+ *
+ * Copyright (C) 2006 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Ebony Zhu, ebony.zhu@freescale.com
+ *
+ * Description:
+ * This file is the implementation of SPE instruction "evfsnabs"
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <asm/uaccess.h>
+
+int
+evfsnabs(u32 *rD, u32 *rA)
+{
+	rD[0] = rA[0] | 0x80000000;
+	rD[1] = rA[1] | 0x80000000;
+
+#ifdef DEBUG
+	printk("%s: D %p, A %p: ", __FUNCTION__, rD, rA);
+	printk("\n");
+#endif
+
+	return 0;
+}
Index: linux-2.6.18/arch/powerpc/math-emu/evfsneg.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/powerpc/math-emu/evfsneg.c
@@ -0,0 +1,33 @@
+/*
+ * arch/powerpc/math-emu/evfsneg.c
+ *
+ * Copyright (C) 2006 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Ebony Zhu, ebony.zhu@freescale.com
+ *
+ * Description:
+ * This file is the implementation of SPE instruction "evfsneg"
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <asm/uaccess.h>
+
+int
+evfsneg(u32 *rD, u32 *rA)
+{
+	rD[0] = rA[0] ^ 0x80000000;
+	rD[1] = rA[1] ^ 0x80000000;
+
+#ifdef DEBUG
+	printk("%s: D %p, A %p: ", __FUNCTION__, rD, rA);
+	printk("\n");
+#endif
+
+	return 0;
+}
Index: linux-2.6.18/arch/powerpc/math-emu/evfssub.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/powerpc/math-emu/evfssub.c
@@ -0,0 +1,68 @@
+/*
+ * arch/powerpc/math-emu/evfssub.c
+ *
+ * Copyright (C) 2006 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Ebony Zhu, ebony.zhu@freescale.com
+ *
+ * Description:
+ * This file is the implementation of SPE instruction "evfssub"
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <asm/uaccess.h>
+
+#include "spe.h"
+#include "soft-fp.h"
+#include "single.h"
+
+int
+evfssub(u64 *rD, u32 *rA, u32 *rB)
+{
+	FP_DECL_S(A0);
+	FP_DECL_S(A1);
+	FP_DECL_S(B0);
+	FP_DECL_S(B1);
+	FP_DECL_S(R0);
+	FP_DECL_S(R1);
+	int ret = 0;
+
+#ifdef DEBUG
+	printk("%s: %p %p %p\n", __FUNCTION__, rD, rA, rB);
+#endif
+
+	__FP_UNPACK_S(A0, rA);
+	rA[0] = rA[1];
+	__FP_UNPACK_S(A1, rA);
+	__FP_UNPACK_S(B0, rB);
+	rB[0] = rB[1];
+	__FP_UNPACK_S(B1, rB);
+
+#ifdef DEBUG
+	printk("A0: %ld %lu %ld (%ld)\n", A0_s, A0_f, A0_e, A0_c);
+	printk("A1: %ld %lu %ld (%ld)\n", A1_s, A1_f, A1_e, A1_c);
+	printk("B0: %ld %lu %ld (%ld)\n", B0_s, B0_f, B0_e, B0_c);	
+	printk("B1: %ld %lu %ld (%ld)\n", B1_s, B1_f, B1_e, B1_c);	
+#endif
+
+	if (B0_c != FP_CLS_NAN)
+		B0_s ^= 1;
+	if (B1_c != FP_CLS_NAN)
+		B1_s ^= 1;
+		
+	FP_ADD_S(R0, A0, B0);
+	FP_ADD_S(R1, A1, B1);
+
+#ifdef DEBUG
+	printk("D0: %ld %lu %ld (%ld)\n", R0_s, R0_f, R0_e, R0_c);
+	printk("D1: %ld %lu %ld (%ld)\n", R1_s, R1_f, R1_e, R1_c);
+#endif
+	
+	return (ret | __FP_PACK_S(rD, R0) | __FP_PACK_S(rD+1, R1));
+}
Index: linux-2.6.18/mvl_patches/pro50-0554.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-0554.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(554);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

