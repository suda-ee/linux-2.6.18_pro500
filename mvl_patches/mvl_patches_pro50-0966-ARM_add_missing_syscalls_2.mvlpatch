#! /usr/bin/env bash
# Patch: -ARM_add_missing_syscalls_2
# Date: Tue Mar 11 17:32:39 2008
# MR: 22952
# Commit: 5a059f1ac0ed0c937257027aed5da50241f5ec2b
# Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
# Date:   Sun Dec 17 18:23:10 2006 +0000
# 
#     [ARM] Add more syscalls
#     
#     Add:
#       sys_unshare
#       sys_set_robust_list
#       sys_get_robust_list
#       sys_splice
#       sys_arm_sync_file_range
#       sys_tee
#       sys_vmsplice
#       sys_move_pages
#       sys_getcpu
#     
#     Special note about sys_arm_sync_file_range(), which is implemented as:
#     
#     asmlinkage long sys_arm_sync_file_range(int fd, unsigned int flags,
#                                             loff_t offset, loff_t nbytes)
#     {
#             return sys_sync_file_range(fd, offset, nbytes, flags);
#     }
#     
#     We can't export sys_sync_file_range() directly on ARM because the
#     argument list someone picked does not fit in the available registers.
#     Would be nice if... there was an arch maintainer review mechanism for
#     new syscalls before they hit the kernel.
#     
#     Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
# 
#     Backported to mvl-kernel-26 foundation3 for get_robust_list and
#     set_robust_list syscall entries required for robust mutexes and PI.
# 
#     Fixed up rejects due to collisions between LTTng syscall entries and
#     RT patch changes.  Luckily, the LTTng syscall entries are unused in
#     upstream kernel.org so there is no conflict betwee our current syscall
#     entries relative to upstream.
# 
#     Signed-off-by: Khem Raj <kraj@mvista.com>
#     Signed-off-by: Deepak Saxena <dsaxena@mvista.com>
#     Signed-off-by: George G. Davis <gdavis@mvista.com>
# 
# 

PATCHNUM=966
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
MR: 22952
Commit: 5a059f1ac0ed0c937257027aed5da50241f5ec2b
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Sun Dec 17 18:23:10 2006 +0000

    [ARM] Add more syscalls
    
    Add:
      sys_unshare
      sys_set_robust_list
      sys_get_robust_list
      sys_splice
      sys_arm_sync_file_range
      sys_tee
      sys_vmsplice
      sys_move_pages
      sys_getcpu
    
    Special note about sys_arm_sync_file_range(), which is implemented as:
    
    asmlinkage long sys_arm_sync_file_range(int fd, unsigned int flags,
                                            loff_t offset, loff_t nbytes)
    {
            return sys_sync_file_range(fd, offset, nbytes, flags);
    }
    
    We can't export sys_sync_file_range() directly on ARM because the
    argument list someone picked does not fit in the available registers.
    Would be nice if... there was an arch maintainer review mechanism for
    new syscalls before they hit the kernel.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

    Backported to mvl-kernel-26 foundation3 for get_robust_list and
    set_robust_list syscall entries required for robust mutexes and PI.

    Fixed up rejects due to collisions between LTTng syscall entries and
    RT patch changes.  Luckily, the LTTng syscall entries are unused in
    upstream kernel.org so there is no conflict betwee our current syscall
    entries relative to upstream.

    Signed-off-by: Khem Raj <kraj@mvista.com>
    Signed-off-by: Deepak Saxena <dsaxena@mvista.com>
    Signed-off-by: George G. Davis <gdavis@mvista.com>


Index: linux-2.6.18/arch/arm/kernel/calls.S
===================================================================
--- linux-2.6.18.orig/arch/arm/kernel/calls.S
+++ linux-2.6.18/arch/arm/kernel/calls.S
@@ -110,7 +110,7 @@
 		CALL(sys_ni_syscall)		/* was sys_profil */
 		CALL(sys_statfs)
 /* 100 */	CALL(sys_fstatfs)
-		CALL(sys_ni_syscall)
+		CALL(sys_ni_syscall)		/* sys_ioperm */
 		CALL(OBSOLETE(ABI(sys_socketcall, sys_oabi_socketcall)))
 		CALL(sys_syslog)
 		CALL(sys_setitimer)
@@ -132,7 +132,7 @@
 /* 120 */	CALL(sys_clone_wrapper)
 		CALL(sys_setdomainname)
 		CALL(sys_newuname)
-		CALL(sys_ni_syscall)
+		CALL(sys_ni_syscall)		/* modify_ldt */
 		CALL(sys_adjtimex)
 /* 125 */	CALL(sys_mprotect)
 		CALL(sys_sigprocmask)
@@ -146,7 +146,7 @@
 		CALL(sys_bdflush)
 /* 135 */	CALL(sys_sysfs)
 		CALL(sys_personality)
-		CALL(sys_ni_syscall)		/* CALL(_sys_afs_syscall) */
+		CALL(sys_ni_syscall)		/* reserved for afs_syscall */
 		CALL(sys_setfsuid16)
 		CALL(sys_setfsgid16)
 /* 140 */	CALL(sys_llseek)
@@ -175,7 +175,7 @@
 		CALL(sys_arm_mremap)
 		CALL(sys_setresuid16)
 /* 165 */	CALL(sys_getresuid16)
-		CALL(sys_ni_syscall)
+		CALL(sys_ni_syscall)		/* vm86 */
 		CALL(sys_ni_syscall)		/* was sys_query_module */
 		CALL(sys_poll)
 		CALL(sys_nfsservctl)
@@ -197,8 +197,8 @@
 /* 185 */	CALL(sys_capset)
 		CALL(sys_sigaltstack_wrapper)
 		CALL(sys_sendfile)
-		CALL(sys_ni_syscall)
-		CALL(sys_ni_syscall)
+		CALL(sys_ni_syscall)		/* getpmsg */
+		CALL(sys_ni_syscall)		/* putpmsg */
 /* 190 */	CALL(sys_vfork_wrapper)
 		CALL(sys_getrlimit)
 		CALL(sys_mmap2)
@@ -344,8 +344,18 @@
 		CALL(sys_readlinkat)
 		CALL(sys_fchmodat)
 		CALL(sys_faccessat)
-/* 335 */	CALL(sys_ltt_trace_generic)
- 		CALL(sys_ltt_register_generic)
+/* 335 */	CALL(sys_ltt_trace_generic)	/* eventually pselect6 */
+ 		CALL(sys_ltt_register_generic)	/* eventually ppoll */
+		CALL(sys_unshare)
+		CALL(sys_set_robust_list)
+		CALL(sys_get_robust_list)
+/* 340 */	CALL(sys_splice)
+		CALL(sys_arm_sync_file_range)
+		CALL(sys_tee)
+		CALL(sys_vmsplice)
+		CALL(sys_move_pages)
+/* 345 */	CALL(sys_getcpu)
+		CALL(sys_ni_syscall)		/* eventually epoll_pwait */
 #ifndef syscalls_counted
 .equ syscalls_padding, ((NR_syscalls + 3) & ~3) - NR_syscalls
 #define syscalls_counted
Index: linux-2.6.18/arch/arm/kernel/sys_arm.c
===================================================================
--- linux-2.6.18.orig/arch/arm/kernel/sys_arm.c
+++ linux-2.6.18/arch/arm/kernel/sys_arm.c
@@ -330,3 +330,16 @@ asmlinkage long sys_arm_fadvise64_64(int
 {
 	return sys_fadvise64_64(fd, offset, len, advice);
 }
+
+/*
+ * Yet more syscall fsckage - we can't fit sys_sync_file_range's
+ * arguments into the available registers with EABI.  So, let's
+ * create an ARM specific syscall for this which has _sane_
+ * arguments.  (This incidentally also has an ABI-independent
+ * argument layout.)
+ */
+asmlinkage long sys_arm_sync_file_range(int fd, unsigned int flags,
+					loff_t offset, loff_t nbytes)
+{
+	return sys_sync_file_range(fd, offset, nbytes, flags);
+}
Index: linux-2.6.18/include/asm-arm/unistd.h
===================================================================
--- linux-2.6.18.orig/include/asm-arm/unistd.h
+++ linux-2.6.18/include/asm-arm/unistd.h
@@ -360,8 +360,18 @@
 #define __NR_readlinkat			(__NR_SYSCALL_BASE+332)
 #define __NR_fchmodat			(__NR_SYSCALL_BASE+333)
 #define __NR_faccessat			(__NR_SYSCALL_BASE+334)
-#define	__NR_ltt_trace_generic		(__NR_SYSCALL_BASE+335)
-#define	__NR_ltt_register_generic	(__NR_SYSCALL_BASE+336)
+#define	__NR_ltt_trace_generic		(__NR_SYSCALL_BASE+335)	/* 335 for pselect6 */
+#define	__NR_ltt_register_generic	(__NR_SYSCALL_BASE+336)	/* 336 for ppoll */
+#define __NR_unshare			(__NR_SYSCALL_BASE+337)
+#define __NR_set_robust_list		(__NR_SYSCALL_BASE+338)
+#define __NR_get_robust_list		(__NR_SYSCALL_BASE+339)
+#define __NR_splice			(__NR_SYSCALL_BASE+340)
+#define __NR_arm_sync_file_range	(__NR_SYSCALL_BASE+341)
+#define __NR_tee			(__NR_SYSCALL_BASE+342)
+#define __NR_vmsplice			(__NR_SYSCALL_BASE+343)
+#define __NR_move_pages			(__NR_SYSCALL_BASE+344)
+#define __NR_getcpu			(__NR_SYSCALL_BASE+345)
+					/* 346 for epoll_pwait */
 
 #ifndef __ASSEMBLY__
 #define NR_syscalls			(__NR_set_mempolicy + 1 - __NR_SYSCALL_BASE)
Index: linux-2.6.18/mvl_patches/pro50-0966.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-0966.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(966);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

