#! /usr/bin/env bash
# Patch: -ALSA_ASoC_Samsung_S3c24xx_updates_audio_DMA_clea
# Date: Mon Jul 21 10:29:02 2008
# MR: 26835
# Disposition: Backport from 2.6.22-rc1
# Adjustments:
# 
# From 7f1bc26e7df85957bcc48442f135e7a6f85e5edc Mon Sep 17 00:00:00 2001
# From: Graeme Gregory <gg@opensource.wolfsonmicro.com>
# Date: Tue, 17 Apr 2007 12:35:18 +0200
# Subject: [PATCH] [ALSA] ASoC Samsung S3c24xx updates - audio DMA cleanup
# 
# This patch cleans up the audio DMA for the Samsung S3C24xx platform.
# 
# Signed-off-by: Graeme Gregory <gg@opensource.wolfsonmicro.com>
# Signed-off-by: Liam Girdwood <lg@opensource.wolfsonmicro.com>
# Signed-off-by: Takashi Iwai <tiwai@suse.de>
# Signed-off-by: Jaroslav Kysela <perex@suse.cz>

PATCHNUM=1357
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
MR: 26835
Disposition: Backport from 2.6.22-rc1
Adjustments:

From 7f1bc26e7df85957bcc48442f135e7a6f85e5edc Mon Sep 17 00:00:00 2001
From: Graeme Gregory <gg@opensource.wolfsonmicro.com>
Date: Tue, 17 Apr 2007 12:35:18 +0200
Subject: [PATCH] [ALSA] ASoC Samsung S3c24xx updates - audio DMA cleanup

This patch cleans up the audio DMA for the Samsung S3C24xx platform.

Signed-off-by: Graeme Gregory <gg@opensource.wolfsonmicro.com>
Signed-off-by: Liam Girdwood <lg@opensource.wolfsonmicro.com>
Signed-off-by: Takashi Iwai <tiwai@suse.de>
Signed-off-by: Jaroslav Kysela <perex@suse.cz>
Index: linux-2.6.18/sound/soc/s3c24xx/s3c24xx-pcm.c
===================================================================
--- linux-2.6.18.orig/sound/soc/s3c24xx/s3c24xx-pcm.c
+++ linux-2.6.18/sound/soc/s3c24xx/s3c24xx-pcm.c
@@ -89,7 +89,7 @@ static void s3c24xx_pcm_enqueue(struct s
 
 	DBG("Entered %s\n", __FUNCTION__);
 
-	while ( prtd->dma_loaded < prtd->dma_limit) {
+	while (prtd->dma_loaded < prtd->dma_limit) {
 		unsigned long len = prtd->dma_period;
 
 		DBG("dma_loaded: %d\n",prtd->dma_loaded);
@@ -100,7 +100,8 @@ static void s3c24xx_pcm_enqueue(struct s
 			       __FUNCTION__, len);
 		}
 
-		ret = s3c2410_dma_enqueue(prtd->params->channel, substream, pos, len);
+		ret = s3c2410_dma_enqueue(prtd->params->channel, 
+			substream, pos, len);
 
 		if (ret == 0) {
 			prtd->dma_loaded++;
@@ -115,17 +116,19 @@ static void s3c24xx_pcm_enqueue(struct s
 }
 
 static void s3c24xx_audio_buffdone(struct s3c2410_dma_chan *channel,
-							void *dev_id, int size,
-							enum s3c2410_dma_buffresult result)
+				void *dev_id, int size,
+				enum s3c2410_dma_buffresult result)
 {
 	struct snd_pcm_substream *substream = dev_id;
-	struct s3c24xx_runtime_data *prtd = substream->runtime->private_data;
+	struct s3c24xx_runtime_data *prtd;
 
 	DBG("Entered %s\n", __FUNCTION__);
 
 	if (result == S3C2410_RES_ABORT || result == S3C2410_RES_ERR)
 		return;
 
+	prtd = substream->runtime->private_data;
+	
 	if (substream)
 		snd_pcm_period_elapsed(substream);
 
@@ -173,18 +176,22 @@ static int s3c24xx_pcm_hw_params(struct 
 	 * sync to pclk, half-word transfers to the IIS-FIFO. */
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
 		s3c2410_dma_devconfig(prtd->params->channel,
-						S3C2410_DMASRC_MEM, S3C2410_DISRCC_INC |
-						S3C2410_DISRCC_APB, prtd->params->dma_addr);
+				S3C2410_DMASRC_MEM, S3C2410_DISRCC_INC |
+				S3C2410_DISRCC_APB, prtd->params->dma_addr);
 
 		s3c2410_dma_config(prtd->params->channel,
-						2, S3C2410_DCON_SYNC_PCLK | S3C2410_DCON_HANDSHAKE);
+				prtd->params->dma_size,
+				S3C2410_DCON_SYNC_PCLK | 
+				S3C2410_DCON_HANDSHAKE);
 	} else {
 		s3c2410_dma_config(prtd->params->channel,
-						2, S3C2410_DCON_HANDSHAKE | S3C2410_DCON_SYNC_PCLK);
+				prtd->params->dma_size,
+				S3C2410_DCON_HANDSHAKE | 
+				S3C2410_DCON_SYNC_PCLK);
 
 		s3c2410_dma_devconfig(prtd->params->channel,
-						S3C2410_DMASRC_HW, 0x3,
-						prtd->params->dma_addr);
+					S3C2410_DMASRC_HW, 0x3,
+					prtd->params->dma_addr);
 	}
 
 	s3c2410_dma_set_buffdone_fn(prtd->params->channel,
@@ -215,7 +222,7 @@ static int s3c24xx_pcm_hw_free(struct sn
 	/* TODO - do we need to ensure DMA flushed */
 	snd_pcm_set_runtime_buffer(substream, NULL);
 
-	if(prtd->params) {
+	if (prtd->params) {
 		s3c2410_dma_free(prtd->params->channel, prtd->params->client);
 		prtd->params = NULL;
 	}
@@ -281,7 +288,8 @@ static int s3c24xx_pcm_trigger(struct sn
 	return ret;
 }
 
-static snd_pcm_uframes_t s3c24xx_pcm_pointer(struct snd_pcm_substream *substream)
+static snd_pcm_uframes_t 
+	s3c24xx_pcm_pointer(struct snd_pcm_substream *substream)
 {
 	struct snd_pcm_runtime *runtime = substream->runtime;
 	struct s3c24xx_runtime_data *prtd = runtime->private_data;
@@ -321,8 +329,6 @@ static int s3c24xx_pcm_open(struct snd_p
 	struct snd_pcm_runtime *runtime = substream->runtime;
 	struct s3c24xx_runtime_data *prtd;
 
-	int ret;
-
 	DBG("Entered %s\n", __FUNCTION__);
 
 	snd_soc_set_runtime_hwparams(substream, &s3c24xx_pcm_hardware);
@@ -342,7 +348,7 @@ static int s3c24xx_pcm_close(struct snd_
 
 	DBG("Entered %s\n", __FUNCTION__);
 
-	if(prtd)
+	if (prtd)
 		kfree(prtd);
 	else
 		DBG("s3c24xx_pcm_close called with prtd == NULL\n");
@@ -419,8 +425,8 @@ static void s3c24xx_pcm_free_dma_buffers
 
 static u64 s3c24xx_pcm_dmamask = DMA_32BIT_MASK;
 
-static int s3c24xx_pcm_new(struct snd_card *card, struct snd_soc_codec_dai *dai,
-	struct snd_pcm *pcm)
+static int s3c24xx_pcm_new(struct snd_card *card, 
+	struct snd_soc_codec_dai *dai, struct snd_pcm *pcm)
 {
 	int ret = 0;
 
Index: linux-2.6.18/sound/soc/s3c24xx/s3c24xx-pcm.h
===================================================================
--- linux-2.6.18.orig/sound/soc/s3c24xx/s3c24xx-pcm.h
+++ linux-2.6.18/sound/soc/s3c24xx/s3c24xx-pcm.h
@@ -16,15 +16,14 @@
 #define ST_OPENED		(1<<1)
 
 struct s3c24xx_pcm_dma_params {
-	struct s3c2410_dma_client *client;			/* stream identifier */
-	int channel;						/* Channel ID */
+	struct s3c2410_dma_client *client;	/* stream identifier */
+	int channel;				/* Channel ID */
 	dma_addr_t dma_addr;
+	int dma_size;			/* Size of the DMA transfer */
 };
 
 #define S3C24XX_DAI_I2S			0
 
-extern struct snd_soc_cpu_dai s3c24xx_i2s_dai;
-
 /* platform data */
 extern struct snd_soc_platform s3c24xx_soc_platform;
 extern struct snd_ac97_bus_ops s3c24xx_ac97_ops;
Index: linux-2.6.18/mvl_patches/pro50-1357.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1357.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1357);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

