#! /usr/bin/env bash
# Patch: -powerpc_mpc8641_hpcn_enable_superio_devices
# Date: Thu Sep  6 08:27:19 2007
# Source: MontaVista Software, Inc.
# MR: 23289
# Type: Defect Fix
# Disposition: refused by linuxppc-dev
# Signed-off-by: Wade Farnsworth <wfarnsworth@mvista.com>
# Description:
#     Enable the SuperI/O devices on the MPC8641 HPCN.
# 
#     This was refused upstream in favor of putting similar code into U-boot.
#     However, since the version of U-boot we are targetting does not do this,
#     we need to put it into the kernel instead.
# 

PATCHNUM=162
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 23289
Type: Defect Fix
Disposition: refused by linuxppc-dev
Signed-off-by: Wade Farnsworth <wfarnsworth@mvista.com>
Description:
    Enable the SuperI/O devices on the MPC8641 HPCN.

    This was refused upstream in favor of putting similar code into U-boot.
    However, since the version of U-boot we are targetting does not do this,
    we need to put it into the kernel instead.

Index: linux-2.6.18/arch/powerpc/boot/dts/mpc8641_hpcn.dts
===================================================================
--- linux-2.6.18.orig/arch/powerpc/boot/dts/mpc8641_hpcn.dts
+++ linux-2.6.18/arch/powerpc/boot/dts/mpc8641_hpcn.dts
@@ -338,6 +338,11 @@
 								<&mpic>;
 						};
 
+						superio: superio@4e {
+							reg = <1 4e 2>;
+							compatible = "smsc,lpc47m192";
+						};
+
 						i8042@60 {
 							#size-cells = <0>;
 							#address-cells = <1>;
@@ -345,6 +350,7 @@
 							interrupts = <1 3 c 3>;
 							interrupt-parent =
 								<&i8259>;
+							sio-handle = <&superio>;
 
 							keyboard@0 {
 								reg = <0>;
@@ -365,6 +371,8 @@
 
 						gpio@400 {
 							reg = <1 400 80>;
+							compatible = "smsc,lpc47m192-gpio";
+							sio-handle = <&superio>;
 						};
 					};
 				};
Index: linux-2.6.18/arch/powerpc/platforms/86xx/mpc86xx_hpcn.c
===================================================================
--- linux-2.6.18.orig/arch/powerpc/platforms/86xx/mpc86xx_hpcn.c
+++ linux-2.6.18/arch/powerpc/platforms/86xx/mpc86xx_hpcn.c
@@ -126,6 +126,42 @@ mpc86xx_hpcn_init_irq(void)
 
 #ifdef CONFIG_PCI
 
+struct resource sio_res;
+
+/* Find the superio node and set up the resource. */
+static inline struct device_node *find_sio_node(struct device_node *np)
+{
+	const phandle *sio_ph;
+	struct device_node *sio;
+
+	sio_ph = get_property(np, "sio-handle", NULL);
+
+	if (!sio_ph)
+		return NULL;
+
+	sio = of_find_node_by_phandle(*sio_ph);
+	
+	if (!of_address_to_resource(sio, 0, &sio_res))
+		return sio;
+
+	/* no address? */
+	of_node_put(sio);
+	return NULL;
+	
+}
+
+static inline void __init sio_write(u8 val, u8 index)
+{
+	outb(index, sio_res.start);
+	outb(val, sio_res.start + 1);
+}
+
+static inline u8 __init sio_read(u8 index)
+{
+	outb(index, sio_res.start);
+	return inb(sio_res.start + 1);
+}
+
 enum pirq{PIRQA = 8, PIRQB, PIRQC, PIRQD, PIRQE, PIRQF, PIRQG, PIRQH};
 const unsigned char uli1575_irq_route_table[16] = {
 	0, 	/* 0: Reserved */
@@ -171,6 +207,7 @@ static void __devinit quirk_uli1575(stru
 	unsigned long pirq_map_word = 0;
 	u32 irq;
 	int i;
+	struct device_node *np;
 
 	/*
 	 * ULI1575 interrupts route setup
@@ -292,6 +329,73 @@ static void __devinit quirk_uli1575(stru
 	pci_read_config_byte(dev, 0xb8, &c);
 	c &= 0x7f;
 	pci_write_config_byte(dev, 0xb8, c);
+
+	/* Enable superio and keyboard/mouse address decoding */
+	pci_write_config_byte(dev, 0x63, 0x90);
+
+	/* Configure superio keyboard/mouse */
+	if (!(np = of_find_compatible_node(NULL, NULL, "pnpPNP,303")))
+		np = of_find_compatible_node(NULL, NULL, "pnpPNP,f03");
+	if (np) {
+		struct device_node *sio, *parent;
+
+		parent = of_get_parent(np);
+		of_node_put(np);
+		if (parent) {
+
+			sio = find_sio_node(parent);
+
+			if (sio) {
+				const u32 * ints;
+				if ((ints = get_property(parent,
+							 "interrupts",
+							 NULL))) {
+					/*
+					 * Activate keyboard (device 0x7) and
+					 * write IRQ's from device tree.
+					 */
+					sio_read(0x55); /* enter config mode */
+
+					sio_write(0x07, 0x07);
+					sio_write(0x01, 0x30);
+					sio_write(ints[0], 0x70);
+					sio_write(ints[2], 0x72);
+
+					sio_read(0xaa);	/* exit sio cfg mode */
+				}
+
+				of_node_put(sio);
+			}
+			of_node_put(parent);
+		}
+	}
+
+	/* Configure superio runtime registers for gpio in pci i/o space */
+	if ((np = of_find_compatible_node(NULL, NULL, "smsc,lpc47m192-gpio"))) {
+		struct device_node *sio;
+
+		if ((sio = find_sio_node(np))) {
+			const u32 * regs;
+
+			if ((regs = get_property(np, "reg", NULL))) {
+				/*
+				 * Activate runtime regs (device 0xa) and write
+				 * address from device tree.
+				 */
+				sio_read(0x55);	/* enter config mode */
+
+				sio_write(0x0a, 0x07);
+				sio_write(0x01, 0x30);
+				sio_write((regs[1] & 0xff00) >> 8, 0x60);
+				sio_write((regs[1] & 0xff) | 0x1, 0x61);
+
+				sio_read(0xaa);	/* exit config mode */
+			}
+
+			of_node_put(sio);
+		}
+		of_node_put(np);
+	}
 }
 
 static void __devinit quirk_uli5288(struct pci_dev *dev)
Index: linux-2.6.18/mvl_patches/pro50-0162.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-0162.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(162);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

