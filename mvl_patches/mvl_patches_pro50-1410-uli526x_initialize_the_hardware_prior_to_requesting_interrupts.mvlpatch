#! /usr/bin/env bash
# Patch: -uli526x_initialize_the_hardware_prior_to_requesting_interrupts
# Date: Mon Jul 21 10:31:20 2008
# Source: kernel.org
# MR: 28288
# Type: Defect Fix
# Disposition: backport from 2.6.26-rc2 (afd8e39919c913993ac2f9984af8a9ba21c63d27)
# Signed-off-by: Anton Vorontsov <avorontsov@ru.mvista.com>
# Description:
# 
# commit afd8e39919c913993ac2f9984af8a9ba21c63d27
# Author: Anton Vorontsov <avorontsov@ru.mvista.com>
# Date:   Tue Apr 29 19:53:13 2008 +0400
# 
#     uli526x: initialize the hardware prior to requesting interrupts
#     
#     The firmware on MPC8610HPCD boards enables ULI ethernet and leaves it
#     in some funky state before booting Linux. For drivers, it's always good
#     idea to (re)initialize the hardware prior to requesting interrupts.
#     
#     This patch fixes the following oops:
#     
#     Oops: Kernel access of bad area, sig: 11 [#1]
#     MPC86xx HPCD
#     NIP: c0172820 LR: c017287c CTR: 00000000
#     [...]
#     NIP [c0172820] allocate_rx_buffer+0x2c/0xb0
#     LR [c017287c] allocate_rx_buffer+0x88/0xb0
#     Call Trace:
#     [df82bdc0] [c017287c] allocate_rx_buffer+0x88/0xb0 (unreliable)
#     [df82bde0] [c0173000] uli526x_interrupt+0xe4/0x49c
#     [df82be20] [c0045418] request_irq+0xf0/0x114
#     [df82be50] [c01737b0] uli526x_open+0x48/0x160
#     [df82be70] [c0201184] dev_open+0xb0/0xe8
#     [df82be80] [c0200104] dev_change_flags+0x90/0x1bc
#     [df82bea0] [c035fab0] ip_auto_config+0x214/0xef4
#     [df82bf60] [c03421c8] kernel_init+0xc4/0x2ac
#     [df82bff0] [c0010834] kernel_thread+0x44/0x60
#     Instruction dump:
#     4e800020 9421ffe0 7c0802a6 bfa10014 7c7e1b78 90010024 80030060 83e30054
#     2b80002f 419d0078 3fa0c039 48000058 <907f0010> 80630088 2f830000 419e0014
#     
#     Signed-off-by: Anton Vorontsov <avorontsov@ru.mvista.com>
#     Signed-off-by: Jeff Garzik <jgarzik@redhat.com>
# 
#  drivers/net/tulip/uli526x.c |    8 ++++----
#  1 files changed, 4 insertions(+), 4 deletions(-)
# 
# 

PATCHNUM=1410
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: kernel.org
MR: 28288
Type: Defect Fix
Disposition: backport from 2.6.26-rc2 (afd8e39919c913993ac2f9984af8a9ba21c63d27)
Signed-off-by: Anton Vorontsov <avorontsov@ru.mvista.com>
Description:

commit afd8e39919c913993ac2f9984af8a9ba21c63d27
Author: Anton Vorontsov <avorontsov@ru.mvista.com>
Date:   Tue Apr 29 19:53:13 2008 +0400

    uli526x: initialize the hardware prior to requesting interrupts
    
    The firmware on MPC8610HPCD boards enables ULI ethernet and leaves it
    in some funky state before booting Linux. For drivers, it's always good
    idea to (re)initialize the hardware prior to requesting interrupts.
    
    This patch fixes the following oops:
    
    Oops: Kernel access of bad area, sig: 11 [#1]
    MPC86xx HPCD
    NIP: c0172820 LR: c017287c CTR: 00000000
    [...]
    NIP [c0172820] allocate_rx_buffer+0x2c/0xb0
    LR [c017287c] allocate_rx_buffer+0x88/0xb0
    Call Trace:
    [df82bdc0] [c017287c] allocate_rx_buffer+0x88/0xb0 (unreliable)
    [df82bde0] [c0173000] uli526x_interrupt+0xe4/0x49c
    [df82be20] [c0045418] request_irq+0xf0/0x114
    [df82be50] [c01737b0] uli526x_open+0x48/0x160
    [df82be70] [c0201184] dev_open+0xb0/0xe8
    [df82be80] [c0200104] dev_change_flags+0x90/0x1bc
    [df82bea0] [c035fab0] ip_auto_config+0x214/0xef4
    [df82bf60] [c03421c8] kernel_init+0xc4/0x2ac
    [df82bff0] [c0010834] kernel_thread+0x44/0x60
    Instruction dump:
    4e800020 9421ffe0 7c0802a6 bfa10014 7c7e1b78 90010024 80030060 83e30054
    2b80002f 419d0078 3fa0c039 48000058 <907f0010> 80630088 2f830000 419e0014
    
    Signed-off-by: Anton Vorontsov <avorontsov@ru.mvista.com>
    Signed-off-by: Jeff Garzik <jgarzik@redhat.com>

 drivers/net/tulip/uli526x.c |    8 ++++----
 mvl_patches/pro50-1410.c    |   16 ++++++++++++++++
 2 files changed, 20 insertions(+), 4 deletions(-)


Index: linux-2.6.18/drivers/net/tulip/uli526x.c
===================================================================
--- linux-2.6.18.orig/drivers/net/tulip/uli526x.c
+++ linux-2.6.18/drivers/net/tulip/uli526x.c
@@ -436,10 +436,6 @@ static int uli526x_open(struct net_devic
 
 	ULI526X_DBUG(0, "uli526x_open", 0);
 
-	ret = request_irq(dev->irq, &uli526x_interrupt, IRQF_SHARED, dev->name, dev);
-	if (ret)
-		return ret;
-
 	/* system variable init */
 	db->cr6_data = CR6_DEFAULT | uli526x_cr6_user_set;
 	db->tx_packet_cnt = 0;
@@ -458,6 +454,10 @@ static int uli526x_open(struct net_devic
 	/* Initialize ULI526X board */
 	uli526x_init(dev);
 
+	ret = request_irq(dev->irq, &uli526x_interrupt, IRQF_SHARED, dev->name, dev);
+	if (ret)
+		return ret;
+
 	/* Active System Interface */
 	netif_wake_queue(dev);
 
Index: linux-2.6.18/mvl_patches/pro50-1410.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1410.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1410);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

