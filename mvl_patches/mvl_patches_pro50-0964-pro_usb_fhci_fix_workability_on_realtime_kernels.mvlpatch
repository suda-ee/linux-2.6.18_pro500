#! /usr/bin/env bash
# Patch: -pro_usb_fhci_fix_workability_on_realtime_kernels
# Date: Wed Mar  5 16:45:23 2008
# Source: MontaVista Software, Inc.
# MR: 27041
# Type: Defect Fix
# Disposition: local (rt specific)
# Signed-off-by: Anton Vorontsov <avorontsov@ru.mvista.com>
# Description:
# [PRO USB] fhci: fix workability on realtime kernels
# 
# To make FHCI work on RT kernels, we must use non-preemptable interrupts,
# because timings are critical for the software-driven USB controllers.
# To satisfy timings, FHCI interrupt marked as IRQF_NODELAY, and QE timer
# interrupt is marked as IRQF_TIMER. So, these interrupts will not be
# preempted.
# 
# Now, because we use non-preemptable interrupts, we must also stop
# using plain spinlocks, and use raw_spinlocks instead. Though, there is
# a problem with using raw spinlocks and non-preemtable ISRs in general:
# in the old kernels (Pro 5.0, that is) USB core using plain spinlock
# in usb_hcd_giveback_urb() path, thus we can't call it with local irqs
# disabled. This is solved via disabling only QE and FHCI interrupts
# in the process_done_list() routine.
# 
#  drivers/usb/host/fhci-hcd.c |   43 ++++++++++++++++++++++---------------------
#  drivers/usb/host/fhci-hub.c |   13 +++++++++----
#  drivers/usb/host/fhci-q.c   |   23 ++++++++++++-----------
#  drivers/usb/host/fhci.h     |    2 +-
#  4 files changed, 44 insertions(+), 37 deletions(-)
# 

PATCHNUM=964
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 27041
Type: Defect Fix
Disposition: local (rt specific)
Signed-off-by: Anton Vorontsov <avorontsov@ru.mvista.com>
Description:
[PRO USB] fhci: fix workability on realtime kernels

To make FHCI work on RT kernels, we must use non-preemptable interrupts,
because timings are critical for the software-driven USB controllers.
To satisfy timings, FHCI interrupt marked as IRQF_NODELAY, and QE timer
interrupt is marked as IRQF_TIMER. So, these interrupts will not be
preempted.

Now, because we use non-preemptable interrupts, we must also stop
using plain spinlocks, and use raw_spinlocks instead. Though, there is
a problem with using raw spinlocks and non-preemtable ISRs in general:
in the old kernels (Pro 5.0, that is) USB core using plain spinlock
in usb_hcd_giveback_urb() path, thus we can't call it with local irqs
disabled. This is solved via disabling only QE and FHCI interrupts
in the process_done_list() routine.

 drivers/usb/host/fhci-hcd.c |   43 ++++++++++++++++++++++---------------------
 drivers/usb/host/fhci-hub.c |   13 +++++++++----
 drivers/usb/host/fhci-q.c   |   23 ++++++++++++-----------
 drivers/usb/host/fhci.h     |    2 +-
 mvl_patches/pro50-0964.c    |   16 ++++++++++++++++
 5 files changed, 60 insertions(+), 37 deletions(-)

Index: linux-2.6.18/drivers/usb/host/fhci-hcd.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/host/fhci-hcd.c
+++ linux-2.6.18/drivers/usb/host/fhci-hcd.c
@@ -624,8 +624,8 @@ static void device_connected_interrupt(s
 		usb->max_bytes_per_frame = (MAX_BYTES_PER_FRAME - 15);
 		usb_port_enable(usb);
 	}
-	fhci_usb_enable_interrupt(usb);
 out:
+	fhci_usb_enable_interrupt(usb);
 	fhci_dbg(fhci, "<- %s\n", __func__);
 }
 
@@ -635,9 +635,8 @@ static irqreturn_t fhci_frame_limit_time
 	struct usb_hcd *hcd = _hcd;
 	struct fhci_hcd *fhci = hcd_to_fhci(hcd);
 	struct fhci_usb *usb = fhci->usb_lld;
-	unsigned long flags;
-
-	spin_lock_irqsave(&fhci->lock, flags);
+	
+	_raw_spin_lock(&fhci->lock);
 
 	qe_reset_ref_timer_16(fhci->timer, 1500000, 1000);
 
@@ -648,7 +647,7 @@ static irqreturn_t fhci_frame_limit_time
 
 	schedule_transactions(usb);
 
-	spin_unlock_irqrestore(&fhci->lock, flags);
+	_raw_spin_unlock(&fhci->lock);
 
 	return IRQ_HANDLED;
 }
@@ -660,9 +659,8 @@ static irqreturn_t fhci_irq(struct usb_h
 	struct fhci_hcd *fhci = hcd_to_fhci(hcd);
 	struct fhci_usb *usb;
 	u16 usb_er = 0;
-	unsigned long flags;
 
-	spin_lock_irqsave(&fhci->lock, flags);
+	_raw_spin_lock(&fhci->lock);
 
 	usb = fhci->usb_lld;
 
@@ -751,7 +749,7 @@ static irqreturn_t fhci_irq(struct usb_h
 		}
 	} while (usb_er);
 
-	spin_unlock_irqrestore(&fhci->lock, flags);
+	_raw_spin_unlock(&fhci->lock);
 
 	return IRQ_HANDLED;
 }
@@ -959,7 +957,7 @@ static int fhci_start(struct usb_hcd *hc
 		fhci_mem_free(fhci);
 		return -ENODEV;
 	}
-	spin_lock_init(&fhci->lock);
+	_raw_spin_lock_init(&fhci->lock);
 
 	/* connect the virtual root hub */
 	fhci->vroot_hub->dev_num = 1;	/* this field may be needed to fix */
@@ -1049,8 +1047,8 @@ static int fhci_urb_enqueue(struct usb_h
 		return -ENOMEM;
 	}
 
-	spin_lock_irqsave(&fhci->lock, flags);
-	spin_lock(&urb->lock);
+	local_irq_save(flags);
+	_raw_spin_lock(&fhci->lock);
 	/* fill the private part of the URB */
 	urb_priv->num_of_tds = size;
 
@@ -1061,8 +1059,8 @@ static int fhci_urb_enqueue(struct usb_h
 
 	queue_urb(fhci, urb, ep);
 
-	spin_unlock(&urb->lock);
-	spin_unlock_irqrestore(&fhci->lock, flags);
+	_raw_spin_unlock(&fhci->lock);
+	local_irq_restore(flags);
 	return 0;
 }
 
@@ -1076,8 +1074,8 @@ static int fhci_urb_dequeue(struct usb_h
 	if (!urb || !urb->dev || !urb->dev->bus)
 		goto out;
 
-	spin_lock_irqsave(&fhci->lock, flags);
-	spin_lock(&urb->lock);
+	local_irq_save(flags);
+	_raw_spin_lock(&fhci->lock);
 
 	if (usb->port_status != FHCI_PORT_DISABLED) {
 		struct urb_priv *urb_priv;
@@ -1099,8 +1097,8 @@ static int fhci_urb_dequeue(struct usb_h
 		urb_complete_free(fhci, urb);
 
 out2:
-	spin_unlock(&urb->lock);
-	spin_unlock_irqrestore(&fhci->lock, flags);
+	_raw_spin_unlock(&fhci->lock);
+	local_irq_restore(flags);
 out:
 	return 0;
 }
@@ -1113,7 +1111,8 @@ static void fhci_endpoint_disable(struct
 	unsigned long flags;
 
 	fhci = hcd_to_fhci(hcd);
-	spin_lock_irqsave(&fhci->lock, flags);
+	local_irq_save(flags);
+	_raw_spin_lock(&fhci->lock);
 	ed = ep->hcpriv;
 	if (ed) {
 		while (ed->td_head != NULL) {
@@ -1123,7 +1122,8 @@ static void fhci_endpoint_disable(struct
 		recycle_empty_ed(fhci, ed);
 		ep->hcpriv = NULL;
 	}
-	spin_unlock_irqrestore(&fhci->lock, flags);
+	_raw_spin_unlock(&fhci->lock);
+	local_irq_restore(flags);
 }
 
 static int fhci_get_frame_number(struct usb_hcd *hcd)
@@ -1233,7 +1233,7 @@ static int __devinit fhci_probe(struct d
 	fhci->lowspeed_clk = pi->lowspeed_clk;
 
 	ret = request_irq(fhci->timer_irq, fhci_frame_limit_timer_irq,
-			  IRQF_DISABLED, "qe timer (usb)", hcd);
+			  IRQF_DISABLED | IRQF_TIMER, "qe timer (usb)", hcd);
 	if (ret) {
 		dev_err(dev, "failed to request timer irq");
 		goto err_timer_irq;
@@ -1249,7 +1249,8 @@ static int __devinit fhci_probe(struct d
 
 	config_transceiver(fhci, FHCI_OP_HOST);
 
-	ret = usb_add_hcd(hcd, pi->usb_irq.start, IRQF_DISABLED);
+	ret = usb_add_hcd(hcd, pi->usb_irq.start, IRQF_DISABLED |
+						  IRQF_NODELAY);
 	if (ret < 0)
 		goto err_add_hcd;
 
Index: linux-2.6.18/drivers/usb/host/fhci-hub.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/host/fhci-hub.c
+++ linux-2.6.18/drivers/usb/host/fhci-hub.c
@@ -213,7 +213,8 @@ static int fhci_hub_status_data(struct u
 
 	udelay(1000);
 
-	spin_lock_irqsave(&fhci->lock, flags);
+	local_irq_save(flags);
+	_raw_spin_lock(&fhci->lock);
 
 	if (fhci->vroot_hub->port.wPortChange & (USB_PORT_STAT_C_CONNECTION |
 			USB_PORT_STAT_C_ENABLE | USB_PORT_STAT_C_SUSPEND |
@@ -223,7 +224,8 @@ static int fhci_hub_status_data(struct u
 		printk("%x\n", fhci->vroot_hub->port.wPortChange);
 	} 
 
-	spin_unlock_irqrestore(&fhci->lock, flags);
+	_raw_spin_unlock(&fhci->lock);
+	local_irq_restore(flags);
 
 	fhci_dbg(fhci, "<- %s\n", __func__);
 
@@ -241,7 +243,8 @@ static int fhci_hub_control(struct usb_h
 	struct usb_port_status *port_status;
 	unsigned long flags;
 
-	spin_lock_irqsave(&fhci->lock, flags);
+	local_irq_save(flags);
+	_raw_spin_lock(&fhci->lock);
 
 	fhci_dbg(fhci, "-> %s\n", __func__);
 
@@ -366,6 +369,8 @@ error:
 
 	fhci_dbg(fhci, "<- %s\n", __func__);
 
-	spin_unlock_irqrestore(&fhci->lock, flags);
+	_raw_spin_unlock(&fhci->lock);
+	local_irq_restore(flags);
+
 	return retval;
 }
Index: linux-2.6.18/drivers/usb/host/fhci-q.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/host/fhci-q.c
+++ linux-2.6.18/drivers/usb/host/fhci-q.c
@@ -171,7 +171,6 @@ static void urb_complete_free(struct fhc
 {
 	free_urb_priv(fhci, urb);
 
-	spin_lock(&urb->lock);
 	if (urb->status == -EINPROGRESS) {
 		if (urb->actual_length != urb->transfer_buffer_length &&
 				urb->transfer_flags & URB_SHORT_NOT_OK)
@@ -179,10 +178,11 @@ static void urb_complete_free(struct fhc
 		else
 			urb->status = 0;
 	}
-	spin_unlock(&urb->lock);
-	spin_unlock(&fhci->lock);
+	_raw_spin_unlock(&fhci->lock);
+
 	usb_hcd_giveback_urb(fhci_to_hcd(fhci), urb, NULL);
-	spin_lock(&fhci->lock);
+
+	_raw_spin_lock(&fhci->lock);
 }
 
 /*
@@ -229,12 +229,8 @@ static void done_td(struct urb *urb, str
 			cc = USB_TD_OK;
 		}
 		if (cc != USB_TD_OK) {
-			unsigned long flags;
-
-			spin_lock_irqsave(&urb->lock, flags);
 			if (urb->status == -EINPROGRESS)
 				urb->status = status_to_error(cc);
-			spin_unlock_irqrestore(&urb->lock, flags);
 		}
 
 		/* count all non-empty packets except control SETUP packet */
@@ -276,9 +272,11 @@ static void process_done_list(unsigned l
 	struct td *td;
 	struct urb_priv *urb_priv;
 	struct fhci_hcd *fhci = (struct fhci_hcd *)data;
-	unsigned long flags;
 
-	spin_lock_irqsave(&fhci->lock, flags);
+	disable_irq(fhci->timer_irq);
+	disable_irq(fhci_to_hcd(fhci)->irq);
+	_raw_spin_lock(&fhci->lock);
+
 	td = remove_td_from_done_list(fhci->hc_list);
 	while (td != NULL) {
 		urb = td->urb;
@@ -310,7 +308,10 @@ static void process_done_list(unsigned l
 
 		td = remove_td_from_done_list(fhci->hc_list);
 	}
-	spin_unlock_irqrestore(&fhci->lock, flags);
+
+	_raw_spin_unlock(&fhci->lock);
+	enable_irq(fhci->timer_irq);
+	enable_irq(fhci_to_hcd(fhci)->irq);
 }
 
 /*
Index: linux-2.6.18/drivers/usb/host/fhci.h
===================================================================
--- linux-2.6.18.orig/drivers/usb/host/fhci.h
+++ linux-2.6.18/drivers/usb/host/fhci.h
@@ -262,7 +262,7 @@ struct fhci_hcd {
 	enum qe_clock fullspeed_clk;
 	enum qe_clock lowspeed_clk;
 
-	spinlock_t lock;
+	raw_spinlock_t lock;
 	struct fhci_usb *usb_lld; /* Low-level driver */
 	struct virtual_root_hub *vroot_hub; /* the virtual root hub */
 	int active_urbs;
Index: linux-2.6.18/mvl_patches/pro50-0964.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-0964.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(964);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

