#! /usr/bin/env bash
# Patch: -common_mips_bcm1480_kgdb
# Date: Thu Jul 19 13:39:47 2007
# Source: MontaVista Software, Inc.
# MR: 23078
# Type: Enhancement
# Disposition: needs submitting to KGDB Sourceforge
# Signed-off-by: Manish Lachwani <mlachwani@mvista.com>
# Description:
# 
# KGDB Support for BCM1480. Adopted heavily from the 
# Sibyte SB1250 code:
# 
#  arch/mips/sibyte/bcm1480/Makefile      |    1 
#  arch/mips/sibyte/bcm1480/irq.c         |   56 +----------
#  arch/mips/sibyte/bcm1480/kgdb_bigsur.c |  165 +++++++++++++++++++++++++++++++++
#  lib/Kconfig.kgdb                       |    4 
#  4 files changed, 173 insertions(+), 53 deletions(-)
# 
# 

PATCHNUM=83
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 23078
Type: Enhancement
Disposition: needs submitting to KGDB Sourceforge
Signed-off-by: Manish Lachwani <mlachwani@mvista.com>
Description:

KGDB Support for BCM1480. Adopted heavily from the 
Sibyte SB1250 code:

 arch/mips/sibyte/bcm1480/Makefile      |    1 
 arch/mips/sibyte/bcm1480/irq.c         |   56 +----------
 arch/mips/sibyte/bcm1480/kgdb_bigsur.c |  165 +++++++++++++++++++++++++++++++++
 lib/Kconfig.kgdb                       |    4 
 mvl_patches/pro50-0083.c               |   16 +++
 5 files changed, 189 insertions(+), 53 deletions(-)


Index: linux-2.6.18/arch/mips/sibyte/bcm1480/Makefile
===================================================================
--- linux-2.6.18.orig/arch/mips/sibyte/bcm1480/Makefile
+++ linux-2.6.18/arch/mips/sibyte/bcm1480/Makefile
@@ -1,5 +1,6 @@
 obj-y := setup.o irq.o time.o
 
 obj-$(CONFIG_SMP)			+= smp.o
+obj-$(CONFIG_KGDB_SIBYTE)		+= kgdb_bigsur.o
 
 EXTRA_AFLAGS := $(CFLAGS)
Index: linux-2.6.18/arch/mips/sibyte/bcm1480/irq.c
===================================================================
--- linux-2.6.18.orig/arch/mips/sibyte/bcm1480/irq.c
+++ linux-2.6.18/arch/mips/sibyte/bcm1480/irq.c
@@ -29,6 +29,7 @@
 #include <asm/system.h>
 #include <asm/ptrace.h>
 #include <asm/io.h>
+#include <asm/kgdb.h>
 
 #include <asm/sibyte/bcm1480_regs.h>
 #include <asm/sibyte/bcm1480_int.h>
@@ -77,7 +78,6 @@ static int __init nokgdb(char *str)
 __setup("nokgdb", nokgdb);
 
 /* Default to UART1 */
-int kgdb_port = 1;
 #ifdef CONFIG_SIBYTE_SB1250_DUART
 extern char sb1250_duart_present[];
 #endif
@@ -353,6 +353,10 @@ void __init arch_init_irq(void)
 	u64 tmp;
 	unsigned int imask = STATUSF_IP4 | STATUSF_IP3 | STATUSF_IP2 |
 		STATUSF_IP1 | STATUSF_IP0;
+#ifdef CONFIG_KGDB
+	if (kgdb_early_setup)
+		return;
+#endif
 
 	/* Default everything to IP2 */
 	/* Start with _high registers which has no bit 0 interrupt source */
@@ -412,63 +416,13 @@ void __init arch_init_irq(void)
 	 * done in bcm1480_time_init().  Also, the profiling driver
 	 * does its own management of IP7.
 	 */
-
 #ifdef CONFIG_KGDB
 	imask |= STATUSF_IP6;
 #endif
 	/* Enable necessary IPs, disable the rest */
 	change_c0_status(ST0_IM, imask);
-
-#ifdef CONFIG_KGDB
-	if (kgdb_flag) {
-		kgdb_irq = K_BCM1480_INT_UART_0 + kgdb_port;
-
-#ifdef CONFIG_SIBYTE_SB1250_DUART
-		sb1250_duart_present[kgdb_port] = 0;
-#endif
-		/* Setup uart 1 settings, mapper */
-		/* QQQ FIXME */
-		__raw_writeq(M_DUART_IMR_BRK, IO_SPACE_BASE + A_DUART_IMRREG(kgdb_port));
-
-		bcm1480_steal_irq(kgdb_irq);
-		__raw_writeq(IMR_IP6_VAL,
-			     IO_SPACE_BASE + A_BCM1480_IMR_REGISTER(0, R_BCM1480_IMR_INTERRUPT_MAP_BASE_H) +
-			     (kgdb_irq<<3));
-		bcm1480_unmask_irq(0, kgdb_irq);
-
-#ifdef CONFIG_GDB_CONSOLE
-		register_gdb_console();
-#endif
-		prom_printf("Waiting for GDB on UART port %d\n", kgdb_port);
-		set_debug_traps();
-		breakpoint();
-	}
-#endif
-}
-
-#ifdef CONFIG_KGDB
-
-#include <linux/delay.h>
-
-#define duart_out(reg, val)     csr_out32(val, IOADDR(A_DUART_CHANREG(kgdb_port,reg)))
-#define duart_in(reg)           csr_in32(IOADDR(A_DUART_CHANREG(kgdb_port,reg)))
-
-void bcm1480_kgdb_interrupt(struct pt_regs *regs)
-{
-	/*
-	 * Clear break-change status (allow some time for the remote
-	 * host to stop the break, since we would see another
-	 * interrupt on the end-of-break too)
-	 */
-	kstat.irqs[smp_processor_id()][kgdb_irq]++;
-	mdelay(500);
-	duart_out(R_DUART_CMD, V_DUART_MISC_CMD_RESET_BREAK_INT |
-				M_DUART_RX_EN | M_DUART_TX_EN);
-	set_async_breakpoint(&regs->cp0_epc);
 }
 
-#endif 	/* CONFIG_KGDB */
-
 static inline int dclz(unsigned long long x)
 {
 	int lz;
Index: linux-2.6.18/arch/mips/sibyte/bcm1480/kgdb_bigsur.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/mips/sibyte/bcm1480/kgdb_bigsur.c
@@ -0,0 +1,165 @@
+/*
+ * arch/mips/sibyte/bcm1480/kgdb_bigsur.c
+ *
+ * Author: Manish Lachwani, mlachwani@mvista.com
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+
+/*
+ * Support for KGDB on the Broadcom Sibyte 1480 (Bigsur Board). 
+ * The Bigsur for example does not have a 8250/16550 compatible serial
+ * port. Hence, we need to have a driver for the serial
+ * ports to handle KGDB.  This board needs nothing in addition
+ * to what is normally provided by the gdb portion of the stub.
+ */
+
+#include <linux/delay.h>
+#include <linux/kernel_stat.h>
+#include <linux/init.h>
+#include <linux/kgdb.h>
+
+#include <asm/io.h>
+#include <asm/sibyte/bcm1480_regs.h>
+#include <asm/sibyte/bcm1480_int.h>
+#include <asm/sibyte/bcm1480_scd.h>
+#include <asm/sibyte/sb1250.h>
+#include <asm/sibyte/sb1250_uart.h>
+#include <asm/addrspace.h>
+
+int kgdb_port = 1;
+static int kgdb_irq;
+
+extern char sb1250_duart_present[];
+extern int bcm1480_steal_irq(int irq);
+
+/* Forward declarations. */
+static void kgdb_bcm1480_init_duart(void);
+static int kgdb_init_io(void);
+
+#define IMR_IP6_VAL	K_BCM1480_INT_MAP_I4
+#define	duart_out(reg, val)	csr_out32(val, IOADDR(A_BCM1480_DUART_CHANREG(kgdb_port,reg)))
+#define duart_in(reg)		csr_in32(IOADDR(A_BCM1480_DUART_CHANREG(kgdb_port,reg)))
+
+static void kgdb_bigsur_write_char(int c)
+{
+	while ((duart_in(R_DUART_STATUS) & M_DUART_TX_RDY) == 0) ;
+	duart_out(R_DUART_TX_HOLD, c);
+}
+
+static int kgdb_bigsur_read_char(void)
+{
+	int ret_char;
+	unsigned int status;
+
+	status = duart_in(R_DUART_STATUS);
+	while ((status & M_DUART_RX_RDY) == 0) {
+		status = duart_in(R_DUART_STATUS);
+	}
+
+	/*
+	 * Check for framing error
+	 */
+	if (status & M_DUART_FRM_ERR) {
+		kgdb_bcm1480_init_duart();
+		kgdb_bigsur_write_char('-');
+		return '-';
+	}
+
+	ret_char = duart_in(R_DUART_RX_HOLD);
+
+	return ret_char;
+}
+
+void bcm1480_kgdb_interrupt(struct pt_regs *regs)
+{
+	int kgdb_irq = K_BCM1480_INT_UART_0 + kgdb_port;
+	/*
+	 * Clear break-change status (allow some time for the remote
+	 * host to stop the break, since we would see another
+	 * interrupt on the end-of-break too)
+	 */
+	kstat_this_cpu.irqs[kgdb_irq]++;
+	mdelay(500);
+	duart_out(R_DUART_CMD, V_DUART_MISC_CMD_RESET_BREAK_INT |
+		  M_DUART_RX_EN | M_DUART_TX_EN);
+	if (kgdb_io_ops.init != kgdb_init_io) {
+		/* Throw away the data if another I/O routine is
+		 * active.
+		 */
+		unsigned int status;
+
+		status = duart_in(R_DUART_STATUS);
+		while ((status & M_DUART_RX_RDY) == 0) {
+			status = duart_in(R_DUART_STATUS);
+		}
+		/*
+		 * Check for framing error
+		 */
+		if (status & M_DUART_FRM_ERR) {
+			kgdb_bcm1480_init_duart();
+		}
+		duart_in(R_DUART_RX_HOLD);
+	} else
+		breakpoint();
+
+}
+
+/*
+ * We use port #1 and we set it for 115200 BAUD, 8n1.
+ */
+static void kgdb_bcm1480_init_duart(void)
+{
+	/* Set 8n1. */
+	duart_out(R_DUART_MODE_REG_1,
+		  V_DUART_BITS_PER_CHAR_8 | V_DUART_PARITY_MODE_NONE);
+	duart_out(R_DUART_MODE_REG_2, M_DUART_STOP_BIT_LEN_1);
+	/* Set baud rate of 115200. */
+	duart_out(R_DUART_CLK_SEL, V_DUART_BAUD_RATE(115200));
+	/* Enable rx and tx */
+	duart_out(R_DUART_CMD, M_DUART_RX_EN | M_DUART_TX_EN);
+}
+
+static int kgdb_init_io(void)
+{
+#ifdef CONFIG_SIBYTE_SB1250_DUART
+	sb1250_duart_present[kgdb_port] = 0;
+#endif
+
+	kgdb_bcm1480_init_duart();
+
+	return 0;
+}
+
+/*
+ * Hookup our IRQ line.  We will already have been initialized a
+ * this point.
+ */
+static void __init kgdb_bcm1480_hookup_irq(void)
+{
+	/* Steal the IRQ. */
+	kgdb_irq = K_BCM1480_INT_UART_0 + kgdb_port;
+
+	/* Setup uart 1 settings, mapper */
+	__raw_writeq(M_DUART_IMR_BRK, IOADDR(A_BCM1480_DUART_IMRREG(kgdb_port)));
+
+	bcm1480_steal_irq(kgdb_irq);
+
+	__raw_writeq(IMR_IP6_VAL,
+			IOADDR(A_BCM1480_IMR_REGISTER(0, R_BCM1480_IMR_INTERRUPT_MAP_BASE_H) +
+			(kgdb_irq << 3)));
+
+	bcm1480_unmask_irq(0, kgdb_irq);
+}
+
+struct kgdb_io kgdb_io_ops = {
+	.read_char = kgdb_bigsur_read_char,
+	.write_char = kgdb_bigsur_write_char,
+	.init = kgdb_init_io,
+	.late_init = kgdb_bcm1480_hookup_irq,
+	.pre_exception = NULL,
+	.post_exception = NULL
+};
Index: linux-2.6.18/lib/Kconfig.kgdb
===================================================================
--- linux-2.6.18.orig/lib/Kconfig.kgdb
+++ linux-2.6.18/lib/Kconfig.kgdb
@@ -49,7 +49,7 @@ choice
 	default KGDB_8250_NOMODULE
 	default KGDB_MPSC if SERIAL_MPSC
 	default KGDB_CPM_UART if (8xx || 8260)
-	default KGDB_SIBYTE if SIBYTE_SB1xxx_SOC
+	default KGDB_SIBYTE if (SIBYTE_SB1xxx_SOC || SIBYTE_BCM1x80)
  	default KGDB_TXX9 if CPU_TX49XX
 	default KGDB_SH_SCI if SERIAL_SH_SCI
 	default KGDB_PXA_SERIAL if ARCH_PXA
@@ -104,7 +104,7 @@ config KGDB_CPM_UART
 
 config KGDB_SIBYTE
 	bool "KGDB: On the Broadcom SWARM serial port"
-	depends on MIPS && SIBYTE_SB1xxx_SOC
+	depends on MIPS && (SIBYTE_SB1xxx_SOC || SIBYTE_BCM1x80)
 
 config KGDB_TXX9
 	bool "KGDB: On the TX4927/TX4937/TX4938 serial port"
Index: linux-2.6.18/mvl_patches/pro50-0083.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-0083.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(83);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

