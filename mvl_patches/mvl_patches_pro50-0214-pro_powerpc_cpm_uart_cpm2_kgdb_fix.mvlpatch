#! /usr/bin/env bash
# Patch: -pro_powerpc_cpm_uart_cpm2_kgdb_fix
# Date: Wed Sep 26 11:12:12 2007
# Source: MontaVista Software, Inc.
# MR: 24308
# Type: Defect Fix
# Disposition: needs submitting to kgdb mailing list
# Signed-off-by: Wade Farnsworth <wfarnsworth@mvista.com>
# Description:
#     Early KGDB serial support for MPC8272 ADS.
# 

PATCHNUM=214
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 24308
Type: Defect Fix
Disposition: needs submitting to kgdb mailing list
Signed-off-by: Wade Farnsworth <wfarnsworth@mvista.com>
Description:
    Early KGDB serial support for MPC8272 ADS.

Index: linux-2.6.18/drivers/serial/cpm_uart/cpm_uart_cpm2.c
===================================================================
--- linux-2.6.18.orig/drivers/serial/cpm_uart/cpm_uart_cpm2.c
+++ linux-2.6.18/drivers/serial/cpm_uart/cpm_uart_cpm2.c
@@ -41,12 +41,17 @@
 #include <asm/io.h>
 #include <asm/irq.h>
 #include <asm/fs_pd.h>
+#include <asm/lmb.h>
 
 #include <linux/serial_core.h>
 #include <linux/kernel.h>
 
 #include "cpm_uart.h"
 
+extern int init_bootmem_done;
+extern void __init setbat(int index, unsigned long virt, unsigned long phys,
+			  unsigned int size, int flags);
+
 /**************************************************************/
 
 void cpm_line_cr_cmd(int line, int cmd)
@@ -241,8 +246,14 @@ int cpm_uart_allocbuf(struct uart_cpm_po
 	memsz = L1_CACHE_ALIGN(pinfo->rx_nrfifos * pinfo->rx_fifosize) +
 	    L1_CACHE_ALIGN(pinfo->tx_nrfifos * pinfo->tx_fifosize);
 	if (is_con) {
-		mem_addr = alloc_bootmem(memsz);
-		dma_addr = virt_to_bus(mem_addr);
+		/* KGDB hits this before bootmem is setup */
+		if (init_bootmem_done) {
+			mem_addr = alloc_bootmem(memsz);
+			dma_addr = virt_to_bus(mem_addr);
+		} else {
+			dma_addr = (dma_addr_t)lmb_alloc(memsz, 8);
+			mem_addr = __va(dma_addr);
+		}
 	}
 	else
 		mem_addr = dma_alloc_coherent(NULL, memsz, &dma_addr,
@@ -390,3 +401,28 @@ int cpm_uart_init_portdesc(void)
 
 	return 0;
 }
+
+void kgdb_params_early_init(void)
+{
+	if (cpm_uart_nr)
+		return;
+
+	get_from_flat_dt("cpu", "clock-frequency", &ppc_proc_freq);
+	get_from_flat_dt("cpm", "brg-frequency", &brgfreq);
+	get_from_flat_dt("soc", "reg", &immrbase);
+
+	/* Set up BAT for early access to IMMR */
+	mb();
+	mtspr(SPRN_DBAT1L, (immrbase & 0xffff0000) | 0x2a);
+	mtspr(SPRN_DBAT1U, (immrbase & 0xffff0000) | BL_256M << 2 | 2);
+	mb();
+
+	setbat(1, immrbase, immrbase, 0x10000000, _PAGE_IO);
+
+#ifdef CONFIG_MPC8272_ADS
+	/* Enable serial ports in BCSR */
+	clrbits32((u32 *)0xf4500000, BCSR1_RS232_EN1 | BCSR1_RS232_EN2);
+#endif
+
+	cpm2_reset();
+}
Index: linux-2.6.18/arch/powerpc/sysdev/cpm2_common.c
===================================================================
--- linux-2.6.18.orig/arch/powerpc/sysdev/cpm2_common.c
+++ linux-2.6.18/arch/powerpc/sysdev/cpm2_common.c
@@ -47,6 +47,8 @@
 static void cpm2_dpinit(void);
 cpm_cpm2_t	*cpmp;		/* Pointer to comm processor space */
 
+static int dp_initialized = 0;
+
 /* We allocate this here because it is used almost exclusively for
  * the communication processor devices.
  */
@@ -264,6 +266,10 @@ static u8* im_dprambase;
 
 static void cpm2_dpinit(void)
 {
+
+	if(dp_initialized)
+		return;
+
 	spin_lock_init(&cpm_dpmem_lock);
 
 	im_dprambase = ioremap(CPM_MAP_ADDR, CPM_DATAONLY_BASE + CPM_DATAONLY_SIZE);
@@ -282,6 +288,7 @@ static void cpm2_dpinit(void)
 	 */
 	rh_attach_region(&cpm_dpmem_info, (void *)CPM_DATAONLY_BASE,
 			CPM_DATAONLY_SIZE);
+	dp_initialized = 1;
 }
 
 /* This function returns an index into the DPRAM area.
Index: linux-2.6.18/mvl_patches/pro50-0214.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-0214.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(214);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

