#! /usr/bin/env bash
# Patch: -XFRM_Add_generation_count_to_xfrm_state_and_xfrm_dst
# Date: Fri Jun 20 13:59:43 2008
# Source: kernel.org
# MR: 28567
# Type: Defect Fix
# Disposition: backport
# Signed-off-by: Tadashi Abe <tabe@mvista.com>
# Description:
# Each xfrm_state inserted gets a new generation counter value.  When a bundle
# is created, the xfrm_dst objects get the current generation counter of the
# xfrm_state they will attach to at dst->xfrm.
# 
# By checking up both values, we make judgement whether xfrm_dst is valid
# during SA database changes.
# 
# based on commit: 9d4a706d852411154d0c91b9ffb3bec68b94b25c
# 
#  include/net/xfrm.h      |    3 +++
#  net/ipv4/xfrm4_policy.c |    1 +
#  net/ipv6/xfrm6_policy.c |    1 +
#  net/xfrm/xfrm_policy.c  |    2 ++
#  net/xfrm/xfrm_state.c   |    3 +++
#  5 files changed, 10 insertions(+)
# 

PATCHNUM=1232
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: kernel.org
MR: 28567
Type: Defect Fix
Disposition: backport
Signed-off-by: Tadashi Abe <tabe@mvista.com>
Description:
Each xfrm_state inserted gets a new generation counter value.  When a bundle
is created, the xfrm_dst objects get the current generation counter of the
xfrm_state they will attach to at dst->xfrm.

By checking up both values, we make judgement whether xfrm_dst is valid
during SA database changes.

based on commit: 9d4a706d852411154d0c91b9ffb3bec68b94b25c

 include/net/xfrm.h       |    3 +++
 mvl_patches/pro50-1232.c |   16 ++++++++++++++++
 net/ipv4/xfrm4_policy.c  |    1 +
 net/ipv6/xfrm6_policy.c  |    1 +
 net/xfrm/xfrm_policy.c   |    2 ++
 net/xfrm/xfrm_state.c    |    3 +++
 6 files changed, 26 insertions(+)

Index: linux-2.6.18/include/net/xfrm.h
===================================================================
--- linux-2.6.18.orig/include/net/xfrm.h
+++ linux-2.6.18/include/net/xfrm.h
@@ -120,6 +120,8 @@ struct xfrm_state
 	struct xfrm_id		id;
 	struct xfrm_selector	sel;
 
+	u32			genid;
+
 	/* Key manger bits */
 	struct {
 		u8		state;
@@ -722,6 +724,7 @@ struct xfrm_dst
 		struct rt6_info		rt6;
 	} u;
 	struct dst_entry *route;
+	u32 genid;
 	u32 route_mtu_cached;
 	u32 child_mtu_cached;
 	u32 route_cookie;
Index: linux-2.6.18/net/ipv4/xfrm4_policy.c
===================================================================
--- linux-2.6.18.orig/net/ipv4/xfrm4_policy.c
+++ linux-2.6.18/net/ipv4/xfrm4_policy.c
@@ -94,6 +94,7 @@ __xfrm4_bundle_create(struct xfrm_policy
 		xdst = (struct xfrm_dst *)dst1;
 		xdst->route = &rt->u.dst;
 		xdst->route_cookie = 0;
+		xdst->genid = xfrm[i]->genid;
 
 		dst1->next = dst_prev;
 		dst_prev = dst1;
Index: linux-2.6.18/net/ipv6/xfrm6_policy.c
===================================================================
--- linux-2.6.18.orig/net/ipv6/xfrm6_policy.c
+++ linux-2.6.18/net/ipv6/xfrm6_policy.c
@@ -143,6 +143,7 @@ __xfrm6_bundle_create(struct xfrm_policy
 
 		xdst = (struct xfrm_dst *)dst1;
 		xdst->route = &rt->u.dst;
+		xdst->genid = xfrm[i]->genid;
 		xdst->route_cookie = rt->rt6i_node ? rt->rt6i_node->fn_sernum : 0;
 		dst1->next = dst_prev;
 		dst_prev = dst1;
Index: linux-2.6.18/net/xfrm/xfrm_policy.c
===================================================================
--- linux-2.6.18.orig/net/xfrm/xfrm_policy.c
+++ linux-2.6.18/net/xfrm/xfrm_policy.c
@@ -2204,6 +2204,8 @@ int xfrm_bundle_ok(struct xfrm_dst *firs
 			return 0;
 		if (dst->xfrm->km.state != XFRM_STATE_VALID)
 			return 0;
+		if (xdst->genid != dst->xfrm->genid)
+			return 0;
 
 		mtu = dst_mtu(dst->child);
 		if (xdst->child_mtu_cached != mtu) {
Index: linux-2.6.18/net/xfrm/xfrm_state.c
===================================================================
--- linux-2.6.18.orig/net/xfrm/xfrm_state.c
+++ linux-2.6.18/net/xfrm/xfrm_state.c
@@ -61,6 +61,7 @@ static struct list_head xfrm_state_gc_li
 static DEFINE_SPINLOCK(xfrm_state_gc_lock);
 
 static int xfrm_state_gc_flush_bundles;
+static unsigned int xfrm_state_genid;
 
 int __xfrm_state_delete(struct xfrm_state *x);
 
@@ -467,6 +468,8 @@ static void __xfrm_state_insert(struct x
 {
 	unsigned h = xfrm_dst_hash(&x->id.daddr, x->props.family);
 
+	x->genid = ++xfrm_state_genid;
+
 	list_add(&x->bydst, xfrm_state_bydst+h);
 	xfrm_state_hold(x);
 
Index: linux-2.6.18/mvl_patches/pro50-1232.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1232.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1232);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

