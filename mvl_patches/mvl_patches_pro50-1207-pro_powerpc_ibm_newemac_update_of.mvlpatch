#! /usr/bin/env bash
# Patch: -pro_powerpc_ibm_newemac_update_of
# Date: Wed Jun 11 14:51:12 2008
# MR: 27840
# Source: MontaVista Software, Inc.
# Type: Enhancement
# Disposition: local
# Signed-off-by: Valentine Barshak <vbarshak@ru.mvista.com>
# Description:
#     Since pro5.0 now supports of_ interface, update the new_emac
#     driver to use it to have less deviation with the community.
# 

PATCHNUM=1207
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
MR: 27840
Source: MontaVista Software, Inc.
Type: Enhancement
Disposition: local
Signed-off-by: Valentine Barshak <vbarshak@ru.mvista.com>
Description:
    Since pro5.0 now supports of_ interface, update the new_emac
    driver to use it to have less deviation with the community.

Index: linux-2.6.18/drivers/net/ibm_newemac/core.c
===================================================================
--- linux-2.6.18.orig/drivers/net/ibm_newemac/core.c
+++ linux-2.6.18/drivers/net/ibm_newemac/core.c
@@ -2277,7 +2277,7 @@ static int __devinit emac_read_uint_prop
 					 u32 *val, int fatal)
 {
 	int len;
-	const u32 *prop = get_property(np, name, &len);
+	const u32 *prop = of_get_property(np, name, &len);
 	if (prop == NULL || len < sizeof(u32)) {
 		if (fatal)
 			printk(KERN_ERR "%s: missing %s property\n",
@@ -2470,7 +2470,7 @@ static int __devinit emac_init_config(st
 
 	/* PHY mode needs some decoding */
 	dev->phy_mode = PHY_MODE_NA;
-	pm = get_property(np, "phy-mode", &plen);
+	pm = of_get_property(np, "phy-mode", &plen);
 	if (pm != NULL) {
 		int i;
 		for (i = 0; i < ARRAY_SIZE(phy_modes); i++)
@@ -2488,20 +2488,20 @@ static int __devinit emac_init_config(st
 	}
 
 	/* Check EMAC version */
-	if (device_is_compatible(np, "ibm,emac4")) {
+	if (of_device_is_compatible(np, "ibm,emac4")) {
 		dev->features |= EMAC_FTR_EMAC4;
 		if (of_device_is_compatible(np, "ibm,emac-440gx"))
 			dev->features |= EMAC_FTR_440GX_PHY_CLK_FIX;
 	}
 
 	/* Fixup some feature bits based on the device tree */
-	if (get_property(np, "has-inverted-stacr-oc", NULL))
+	if (of_get_property(np, "has-inverted-stacr-oc", NULL))
 		dev->features |= EMAC_FTR_STACR_OC_INVERT;
-	if (get_property(np, "has-new-stacr-staopc", NULL))
+	if (of_get_property(np, "has-new-stacr-staopc", NULL))
 		dev->features |= EMAC_FTR_HAS_NEW_STACR;
 
 	/* CAB lacks the appropriate properties */
-	if (device_is_compatible(np, "ibm,emac-axon"))
+	if (of_device_is_compatible(np, "ibm,emac-axon"))
 		dev->features |= EMAC_FTR_HAS_NEW_STACR |
 			EMAC_FTR_STACR_OC_INVERT;
 
@@ -2537,7 +2537,7 @@ static int __devinit emac_init_config(st
 	}
 
 	/* Read MAC-address */
-	p = get_property(np, "local-mac-address", NULL);
+	p = of_get_property(np, "local-mac-address", NULL);
 	if (p == NULL) {
 		printk(KERN_ERR "%s: Can't find local-mac-address property\n",
 		       np->full_name);
@@ -2850,9 +2850,9 @@ static void __init emac_make_bootlist(vo
 
 		if (of_match_node(emac_match, np) == NULL)
 			continue;
-		if (get_property(np, "unused", NULL))
+		if (of_get_property(np, "unused", NULL))
 			continue;
-		idx = get_property(np, "cell-index", NULL);
+		idx = of_get_property(np, "cell-index", NULL);
 		if (idx == NULL)
 			continue;
 		cell_indices[i] = *idx;
Index: linux-2.6.18/drivers/net/ibm_newemac/mal.c
===================================================================
--- linux-2.6.18.orig/drivers/net/ibm_newemac/mal.c
+++ linux-2.6.18/drivers/net/ibm_newemac/mal.c
@@ -490,11 +490,11 @@ static int __devinit mal_probe(struct of
 	}
 	mal->index = index;
 	mal->ofdev = ofdev;
-	mal->version = device_is_compatible(ofdev->node, "ibm,mcmal2") ? 2 : 1;
+	mal->version = of_device_is_compatible(ofdev->node, "ibm,mcmal2") ? 2 : 1;
 
 	MAL_DBG(mal, "probe" NL);
 
-	prop = get_property(ofdev->node, "num-tx-chans", NULL);
+	prop = of_get_property(ofdev->node, "num-tx-chans", NULL);
 	if (prop == NULL) {
 		printk(KERN_ERR
 		       "mal%d: can't find MAL num-tx-chans property!\n",
@@ -504,7 +504,7 @@ static int __devinit mal_probe(struct of
 	}
 	mal->num_tx_chans = prop[0];
 
-	prop = get_property(ofdev->node, "num-rx-chans", NULL);
+	prop = of_get_property(ofdev->node, "num-rx-chans", NULL);
 	if (prop == NULL) {
 		printk(KERN_ERR
 		       "mal%d: can't find MAL num-rx-chans property!\n",
@@ -562,7 +562,7 @@ static int __devinit mal_probe(struct of
 	/* Current Axon is not happy with priority being non-0, it can
 	 * deadlock, fix it up here
 	 */
-	if (device_is_compatible(ofdev->node, "ibm,mcmal-axon"))
+	if (of_device_is_compatible(ofdev->node, "ibm,mcmal-axon"))
 		cfg &= ~(MAL2_CFG_RPP_10 | MAL2_CFG_WPP_10);
 
 	/* Apply configuration */
Index: linux-2.6.18/drivers/net/ibm_newemac/rgmii.c
===================================================================
--- linux-2.6.18.orig/drivers/net/ibm_newemac/rgmii.c
+++ linux-2.6.18/drivers/net/ibm_newemac/rgmii.c
@@ -262,7 +262,7 @@ static int __devinit rgmii_probe(struct 
 		dev->flags |= EMAC_RGMII_FLAG_HAS_MDIO;
 
 	/* CAB lacks the right properties, fix this up */
-	if (device_is_compatible(ofdev->node, "ibm,rgmii-axon"))
+	if (of_device_is_compatible(ofdev->node, "ibm,rgmii-axon"))
 		dev->flags |= EMAC_RGMII_FLAG_HAS_MDIO;
 
 	DBG2(dev, " Boot FER = 0x%08x, SSR = 0x%08x\n",
Index: linux-2.6.18/mvl_patches/pro50-1207.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1207.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1207);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

